{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/UserBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { AddIcon, InfoIcon, NotificationIcon, ProjectIcon, SwitchModeIcon, TaskIcon } from \"../Common/Icons\";\nimport TaskModal from \"./TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/UserBar.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getProjectPointsRequest } from \"../../services/projectPointServices\";\nimport ProjectPointsModal from \"./ProjectPointsModal\";\nimport ProjectModal from \"./ProjectModal\";\nimport { BOARD, LIST } from \"../../constants/projectConstants\";\nimport { getRequest } from \"../../services/authServices\";\n\nconst UserBar = ({\n  avatar,\n  setAvatar,\n  setMode,\n  mode,\n  setTab,\n  tab\n}) => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const userId = localStorage.getItem(\"id\");\n  const [canShowIcon, setCanShowIcon] = useState(false);\n  const [showAddList, setShowAddList] = useState(false);\n  const [openModal, setOpenModal] = useState(false);\n  const [openProjectModal, setOpenProjectModal] = useState(false);\n  const [openProjectInfoModal, setOpenProjectInfoModal] = useState(false);\n  const values = useSelector(store => store.projectPoints);\n  const [projectId, setProjectId] = useState(0);\n  useEffect(async () => await getProjectPointsRequest(projectId, dispatch), [projectId]);\n  useEffect(() => renderIcon(), [history.location]);\n  useEffect(() => getRequest(userId).then(user => setAvatar(user.avatar)), []);\n\n  const taskClickHandler = () => {\n    setOpenModal(true);\n    setShowAddList(false);\n  };\n\n  const projectClickHandler = () => {\n    setOpenProjectModal(true);\n    setShowAddList(false);\n  };\n\n  const switchProjectMode = () => mode === BOARD ? setMode(LIST) : setMode(BOARD);\n\n  const AddList = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add_list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => taskClickHandler(),\n        className: \"task_point\",\n        children: [/*#__PURE__*/_jsxDEV(TaskIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), \" Task\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => projectClickHandler(),\n        className: \"project_point\",\n        children: [/*#__PURE__*/_jsxDEV(ProjectIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), \" Project\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderIcon = () => {\n    const pathname = history.location.pathname;\n    const string = \"/projects/\";\n    const indexOfString = pathname.indexOf(string);\n\n    if (indexOfString > 0) {\n      const indexOfId = indexOfString + string.length;\n      const projectId = pathname.substr(indexOfId);\n\n      if (projectId >= 0) {\n        setProjectId(projectId);\n        return setCanShowIcon(true);\n      }\n    }\n\n    return setCanShowIcon(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user_bar\",\n    onDragOver: e => e.preventDefault(),\n    children: [openModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      closeModal: () => setOpenModal(false),\n      type: CREATE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 27\n    }, this) : null, openProjectModal ? /*#__PURE__*/_jsxDEV(ProjectModal, {\n      closeModal: () => setOpenProjectModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 34\n    }, this) : null, openProjectInfoModal ? /*#__PURE__*/_jsxDEV(ProjectPointsModal, {\n      setTab: setTab,\n      values: values,\n      closeModal: () => setOpenProjectInfoModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 38\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab_handler\",\n      children: [\"Tab \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tab\",\n        children: tab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icons\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => switchProjectMode(),\n          className: \"project_switch_mode_handler\",\n          children: canShowIcon ? /*#__PURE__*/_jsxDEV(SwitchModeIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 41\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setOpenProjectInfoModal(true),\n          className: \"project_info_handler\",\n          children: canShowIcon ? /*#__PURE__*/_jsxDEV(InfoIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 41\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          tabIndex: -1,\n          onFocus: () => setShowAddList(true),\n          onBlur: () => setShowAddList(false),\n          className: \"add_handler\",\n          children: [/*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), showAddList ? /*#__PURE__*/_jsxDEV(AddList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 41\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon_holder\",\n        children: /*#__PURE__*/_jsxDEV(NotificationIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar_handler\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"avatar\",\n          src: avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserBar, \"wjDLdXH/DSbZLKruft8meUb1tkk=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = UserBar;\nexport default UserBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserBar\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/UserBar.jsx"],"names":["React","useEffect","useState","AddIcon","InfoIcon","NotificationIcon","ProjectIcon","SwitchModeIcon","TaskIcon","TaskModal","CREATE","useHistory","useDispatch","useSelector","getProjectPointsRequest","ProjectPointsModal","ProjectModal","BOARD","LIST","getRequest","UserBar","avatar","setAvatar","setMode","mode","setTab","tab","history","dispatch","userId","localStorage","getItem","canShowIcon","setCanShowIcon","showAddList","setShowAddList","openModal","setOpenModal","openProjectModal","setOpenProjectModal","openProjectInfoModal","setOpenProjectInfoModal","values","store","projectPoints","projectId","setProjectId","renderIcon","location","then","user","taskClickHandler","projectClickHandler","switchProjectMode","AddList","pathname","string","indexOfString","indexOf","indexOfId","length","substr","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AddIcon, InfoIcon, NotificationIcon, ProjectIcon, SwitchModeIcon, TaskIcon } from \"../Common/Icons\";\nimport TaskModal from \"./TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/UserBar.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getProjectPointsRequest } from \"../../services/projectPointServices\";\nimport ProjectPointsModal from \"./ProjectPointsModal\";\nimport ProjectModal from \"./ProjectModal\";\nimport { BOARD, LIST } from \"../../constants/projectConstants\";\nimport { getRequest } from \"../../services/authServices\";\n\nconst UserBar = ({ avatar, setAvatar, setMode, mode, setTab, tab }) => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const userId = localStorage.getItem(\"id\");\n    const [canShowIcon, setCanShowIcon] = useState(false);\n    const [showAddList, setShowAddList] = useState(false);\n    const [openModal, setOpenModal] = useState(false);\n    const [openProjectModal, setOpenProjectModal] = useState(false);\n    const [openProjectInfoModal, setOpenProjectInfoModal] = useState(false);\n    const values = useSelector(store => store.projectPoints);\n    const [projectId, setProjectId] = useState(0);\n\n    useEffect(async () => await getProjectPointsRequest(projectId, dispatch), [projectId]);\n\n    useEffect(() => renderIcon(), [history.location]);\n\n    useEffect(() => getRequest(userId).then(user => setAvatar(user.avatar)), []);\n\n    const taskClickHandler = () => {\n        setOpenModal(true);\n        setShowAddList(false);\n    }\n\n    const projectClickHandler = () => {\n        setOpenProjectModal(true);\n        setShowAddList(false);\n    }\n\n    const switchProjectMode = () => mode === BOARD ? setMode(LIST) : setMode(BOARD);\n\n    const AddList = () => {\n        return(\n            <div className=\"add_list\">\n                <div onClick={() => taskClickHandler()} className=\"task_point\">\n                    <TaskIcon/> Task\n                </div>\n                <div onClick={() => projectClickHandler()} className=\"project_point\">\n                    <ProjectIcon/> Project\n                </div>\n            </div>\n        )\n    }\n\n    const renderIcon = () => {\n        const pathname = history.location.pathname;\n        const string = \"/projects/\";\n        const indexOfString = pathname.indexOf(string);\n\n        if (indexOfString > 0) {\n            const indexOfId = indexOfString + string.length;\n            const projectId = pathname.substr(indexOfId);\n    \n            if (projectId >= 0) {\n                setProjectId(projectId);\n                return setCanShowIcon(true);\n            }\n        }\n\n        return setCanShowIcon(false);\n    }\n    \n    return(\n        <div className=\"user_bar\" onDragOver={e => e.preventDefault()}>\n            { openModal ? <TaskModal closeModal={() => setOpenModal(false)} type={CREATE}/> : null }\n            { openProjectModal ? <ProjectModal closeModal={() => setOpenProjectModal(false)} /> : null }\n            { openProjectInfoModal ? <ProjectPointsModal setTab={setTab} values={values} closeModal={() => setOpenProjectInfoModal(false)}/> : null }\n            <div className=\"tab_handler\">\n                Tab <span className=\"tab\">{tab}</span>\n            </div>\n            <div className=\"icons\">\n                <div className=\"icon_holder\">\n                    <div onClick={() => switchProjectMode()} className=\"project_switch_mode_handler\">\n                        { canShowIcon ? <SwitchModeIcon/> : null }\n                    </div>\n                </div>\n                <div className=\"icon_holder\">\n                    <div onClick={() => setOpenProjectInfoModal(true)} className=\"project_info_handler\">\n                        { canShowIcon ? <InfoIcon/> : null }\n                    </div>\n                </div>\n                <div className=\"icon_holder\">\n                    <div tabIndex={-1} onFocus={() => setShowAddList(true)} onBlur={() => setShowAddList(false)} className=\"add_handler\">\n                        <AddIcon/>\n                        { showAddList ? <AddList/> : null}\n                    </div>\n                </div>\n                <div className=\"icon_holder\">\n                    <NotificationIcon/>\n                </div>\n                <div className=\"avatar_handler\">\n                    <img className=\"avatar\" src={avatar}></img>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default UserBar;"]},"metadata":{},"sourceType":"module"}