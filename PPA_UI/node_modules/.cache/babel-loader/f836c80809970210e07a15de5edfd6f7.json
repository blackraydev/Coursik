{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { deleteTaskRequest, getTasksRequest, updateTasksStatusRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED, TODAY } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE, UPDATE } from \"../../constants/modalConstants\";\nimport { TaskIcon } from \"../Common/Icons\";\nimport { briefMonths, TOMORROW, YESTERDAY } from \"../../constants/dateConstants\";\nimport \"../../styles/ProjectBoard.css\";\nimport { getRequest } from \"../../services/authServices\";\n\nconst ProjectBoard = ({\n  selectProjectMode,\n  setTab\n}) => {\n  _s();\n\n  const [openCreateModal, setOpenCreateModal] = useState(false);\n  const [openUpdateModal, setOpenUpdateModal] = useState(false);\n  const [category, setCategory] = useState(TO_DO);\n  const [priority, setPriority] = useState(0);\n  const [openedTask, setOpenedTask] = useState(null);\n  const {\n    id,\n    projectId\n  } = useParams();\n  const dispatch = useDispatch();\n  const tasks = useSelector(store => store.tasks);\n  const projects = useSelector(store => store.projects);\n  const project = projects.find(proj => proj.id === Number(projectId));\n  const currentTasks = tasks.length && tasks.filter(task => task.project_Id === Number(projectId)).sort((taskA, taskB) => taskA.priority - taskB.priority);\n  const [data, setData] = useState(updateData());\n  const dragItem = useRef();\n  const dragNode = useRef();\n  const [dragging, setDragging] = useState(false);\n  const [canExecuteQuery, setCanExecuteQuery] = useState(false);\n  const [avatar, setAvatar] = useState(); // useEffect(() => {\n  //     if (project) {\n  //         setTab(project.name);\n  //     }\n  // }, [project]);\n\n  useEffect(async () => await getTasksRequest(id, dispatch), []); // useEffect(async () => await getProjectsRequest(id, dispatch), []);\n\n  useEffect(() => setData(updateData()), [tasks]); // useEffect(async () => {\n  //     if (canExecuteQuery) {\n  //         await updateTasksStatus()\n  //             .then(() => setData(updateData()))\n  //     }\n  // }, [canExecuteQuery]);\n  // useEffect(async () => await getRequest(id).then(user => setAvatar(user.avatar)), []);\n\n  function updateData() {\n    const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n    const newData = categories.map(category => {\n      return {\n        title: category,\n        tasks: []\n      };\n    });\n\n    if (currentTasks) {\n      currentTasks.forEach(task => {\n        switch (task.category) {\n          case TO_DO:\n            newData[0].tasks.push(task);\n            break;\n\n          case IN_PROGRESS:\n            newData[1].tasks.push(task);\n            break;\n\n          case COMPLETED:\n            newData[2].tasks.push(task);\n            break;\n        }\n      });\n    }\n\n    return newData;\n  }\n\n  const updateTasksStatus = async () => {\n    const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n    const newTasks = [];\n    data.forEach((board, boardId) => {\n      board.tasks.forEach((task, taskId) => {\n        const edittedTask = currentTasks.find(tempTask => tempTask.id == task.id);\n        newTasks.push({ ...edittedTask,\n          category: categories[boardId],\n          priority: taskId + 1\n        });\n      });\n    });\n    return await updateTasksStatusRequest(newTasks, dispatch).then(data => data).catch(e => console.log(e));\n  };\n\n  const handleDragStart = (e, params) => {\n    dragItem.current = params;\n    dragNode.current = e.target;\n    dragNode.current.addEventListener(\"dragend\", e => handleDragEnd(e));\n    setTimeout(() => {\n      setCanExecuteQuery(false);\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnd = e => {\n    e.preventDefault();\n    setDragging(false);\n    setCanExecuteQuery(true);\n    dragNode.current.removeEventListener(\"dragend\", e => handleDragEnd(e));\n    dragItem.current = null;\n    dragNode.current = null;\n  };\n\n  const handleDragEnter = (e, params) => {\n    const currentItem = dragItem.current;\n\n    if (e.target.id !== dragNode.current.id) {\n      setData(oldData => {\n        let newList = JSON.parse(JSON.stringify(oldData));\n        newList[params.boardId].tasks.splice(params.taskId, 0, newList[currentItem.boardId].tasks.splice(currentItem.taskId, 1)[0]);\n        dragItem.current = params;\n        return newList;\n      });\n    }\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n\n  const changeStyle = ({\n    boardId,\n    taskId\n  }) => {\n    const currentTask = dragItem.current;\n\n    if (currentTask.boardId === boardId && currentTask.taskId === taskId) {\n      return \"dragging project_task_item\";\n    }\n\n    return \"project_task_item\";\n  };\n\n  const ProjectTaskItem = ({\n    boardId,\n    taskId,\n    task\n  }) => {\n    const currentDate = new Date();\n    const taskDate = new Date(task.due_Date);\n    const diff = Math.ceil((taskDate - currentDate) / (1000 * 3600 * 24));\n    let dueDateLabel;\n    let classNameDueDate;\n\n    if (task.due_Date) {\n      const taskDay = taskDate.getDate();\n      const taskMonth = taskDate.getMonth();\n      dueDateLabel = taskDay + \" \" + briefMonths[taskMonth];\n      classNameDueDate = \"future_date\";\n\n      if (diff < 0) {\n        classNameDueDate = \"past_date\";\n      } else if (diff == 0 || diff == 1) {\n        classNameDueDate = \"current_date\";\n      }\n\n      switch (diff) {\n        case -1:\n          dueDateLabel = YESTERDAY;\n          break;\n\n        case 0:\n          dueDateLabel = TODAY;\n          break;\n\n        case 1:\n          dueDateLabel = TOMORROW;\n          break;\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: dragging ? changeStyle({\n        boardId,\n        taskId\n      }) : \"project_task_item\",\n      draggable: true,\n      onDragStart: e => handleDragStart(e, {\n        boardId,\n        taskId\n      }),\n      onDragEnter: dragging ? e => handleDragEnter(e, {\n        boardId,\n        taskId\n      }) : null,\n      onDragOver: handleDragOver,\n      id: task.id,\n      onClick: () => {\n        setOpenedTask(task);\n        setOpenUpdateModal(true);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text_holder\",\n        onDragEnter: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => {\n            deleteTaskRequest(task.id, dispatch);\n            setTimeout(() => {\n              setOpenUpdateModal(false);\n            }, 0);\n          },\n          className: \"icon_holder\",\n          children: /*#__PURE__*/_jsxDEV(TaskIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), task.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"down_part\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar_holder\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"avatar\",\n            src: avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date_holder\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classNameDueDate,\n            onDragEnter: e => e.preventDefault(),\n            children: dueDateLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this);\n  };\n\n  const CreateProjectTaskItem = ({\n    category,\n    priority\n  }) => {\n    const openModalHandler = () => {\n      setPriority(priority);\n      setOpenCreateModal(true);\n      setCategory(category);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_project_task_item\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: openModalHandler,\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTaskModal = () => {\n    return openCreateModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      closeModal: () => setOpenCreateModal(false),\n      type: CREATE,\n      category: category,\n      currentProject: project,\n      priority: priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 31\n    }, this) : null;\n  };\n\n  const renderTaskUpdateModal = () => {\n    return openUpdateModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      task: openedTask,\n      closeModal: () => setOpenUpdateModal(false),\n      type: UPDATE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 31\n    }, this) : null;\n  };\n\n  const renderBoards = () => {\n    return data.map((board, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: board.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_tasks\",\n        id: \"board-\" + index,\n        onDragEnter: dragging && !board.tasks.length ? e => handleDragEnter(e, {\n          boardId: index,\n          taskId: 0\n        }) : null,\n        onDragOver: handleDragOver,\n        children: [board.tasks.map((task, taskIndex) => /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n          boardId: index,\n          taskId: taskIndex,\n          task: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 64\n        }, this)), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n          category: board.title,\n          priority: board.tasks.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: selectProjectMode(),\n    children: [renderTaskModal(), renderTaskUpdateModal(), renderBoards()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectBoard, \"3TCO+qCu2LvOPL64WWac2D8m+OE=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = ProjectBoard;\nexport default ProjectBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectBoard\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","Redirect","useParams","getProjectsRequest","deleteTaskRequest","getTasksRequest","updateTasksStatusRequest","TO_DO","IN_PROGRESS","COMPLETED","TODAY","TaskModal","CREATE","UPDATE","TaskIcon","briefMonths","TOMORROW","YESTERDAY","getRequest","ProjectBoard","selectProjectMode","setTab","openCreateModal","setOpenCreateModal","openUpdateModal","setOpenUpdateModal","category","setCategory","priority","setPriority","openedTask","setOpenedTask","id","projectId","dispatch","tasks","store","projects","project","find","proj","Number","currentTasks","length","filter","task","project_Id","sort","taskA","taskB","data","setData","updateData","dragItem","dragNode","dragging","setDragging","canExecuteQuery","setCanExecuteQuery","avatar","setAvatar","categories","newData","map","title","forEach","push","updateTasksStatus","newTasks","board","boardId","taskId","edittedTask","tempTask","then","catch","e","console","log","handleDragStart","params","current","target","addEventListener","handleDragEnd","setTimeout","preventDefault","removeEventListener","handleDragEnter","currentItem","oldData","newList","JSON","parse","stringify","splice","handleDragOver","changeStyle","currentTask","ProjectTaskItem","currentDate","Date","taskDate","due_Date","diff","Math","ceil","dueDateLabel","classNameDueDate","taskDay","getDate","taskMonth","getMonth","name","CreateProjectTaskItem","openModalHandler","renderTaskModal","renderTaskUpdateModal","renderBoards","index","taskIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { deleteTaskRequest, getTasksRequest, updateTasksStatusRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED, TODAY } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE, UPDATE } from \"../../constants/modalConstants\";\nimport { TaskIcon } from \"../Common/Icons\";\nimport { briefMonths, TOMORROW, YESTERDAY } from \"../../constants/dateConstants\";\nimport \"../../styles/ProjectBoard.css\";\nimport { getRequest } from \"../../services/authServices\";\n\nconst ProjectBoard = ({ selectProjectMode, setTab }) => {\n    const [openCreateModal, setOpenCreateModal] = useState(false);\n    const [openUpdateModal, setOpenUpdateModal] = useState(false);\n    const [category, setCategory] = useState(TO_DO);\n    const [priority, setPriority] = useState(0);\n    const [openedTask, setOpenedTask] = useState(null);\n    const { id, projectId } = useParams();\n    const dispatch = useDispatch();\n    const tasks = useSelector(store => store.tasks);\n    const projects = useSelector(store => store.projects);\n    const project = projects.find(proj => proj.id === Number(projectId));\n    const currentTasks = tasks.length && tasks.filter(task => task.project_Id === Number(projectId))\n                                              .sort((taskA, taskB) => taskA.priority - taskB.priority);\n    const [data, setData] = useState(updateData());\n    const dragItem = useRef();\n    const dragNode = useRef();\n    const [dragging, setDragging] = useState(false);\n    const [canExecuteQuery, setCanExecuteQuery] = useState(false);\n    const [avatar, setAvatar] = useState();\n\n    // useEffect(() => {\n    //     if (project) {\n    //         setTab(project.name);\n    //     }\n    // }, [project]);\n\n    useEffect(async () => await getTasksRequest(id, dispatch), []);\n    // useEffect(async () => await getProjectsRequest(id, dispatch), []);\n\n    useEffect(() => setData(updateData()), [tasks]);\n\n    // useEffect(async () => {\n    //     if (canExecuteQuery) {\n    //         await updateTasksStatus()\n    //             .then(() => setData(updateData()))\n    //     }\n    // }, [canExecuteQuery]);\n\n    // useEffect(async () => await getRequest(id).then(user => setAvatar(user.avatar)), []);\n\n    function updateData () {\n        const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n        const newData = categories.map(category => { return { title: category, tasks: [] } });\n\n        if (currentTasks) {\n            currentTasks.forEach(task => {\n                switch (task.category) {\n                    case TO_DO:\n                        newData[0].tasks.push(task);\n                        break;\n                    case IN_PROGRESS:\n                        newData[1].tasks.push(task);\n                        break;\n                    case COMPLETED:\n                        newData[2].tasks.push(task);\n                        break;\n                }\n            })\n        }\n\n        return newData;\n    }\n\n    const updateTasksStatus = async () => {\n        const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n        const newTasks = [];\n\n        data.forEach((board, boardId) => {\n            board.tasks.forEach((task, taskId) => {\n                const edittedTask = currentTasks.find(tempTask => tempTask.id == task.id);\n                newTasks.push({\n                    ...edittedTask,\n                    category: categories[boardId],\n                    priority: taskId + 1\n                });\n            })\n        });\n\n        return await updateTasksStatusRequest(newTasks, dispatch)\n                        .then(data => data)\n                        .catch(e => console.log(e));\n    }\n\n    const handleDragStart = (e, params) => {\n        dragItem.current = params;\n        dragNode.current = e.target;\n        dragNode.current.addEventListener(\"dragend\", e => handleDragEnd(e));\n\n        setTimeout(() => {\n            setCanExecuteQuery(false);\n            setDragging(true);\n        }, 0);\n    }\n\n    const handleDragEnd = e => {\n        e.preventDefault();\n        \n        setDragging(false);\n        setCanExecuteQuery(true);\n\n        dragNode.current.removeEventListener(\"dragend\", e => handleDragEnd(e));\n        dragItem.current = null;\n        dragNode.current = null;\n    }\n\n    const handleDragEnter = (e, params) => {\n        const currentItem = dragItem.current;\n\n        if (e.target.id !== dragNode.current.id) {\n            setData(oldData => {\n                let newList = JSON.parse(JSON.stringify(oldData));\n                newList[params.boardId].tasks.splice(params.taskId, 0, newList[currentItem.boardId].tasks.splice(currentItem.taskId, 1)[0]);\n                dragItem.current = params;\n                return newList;\n            })\n        }\n    }\n\n    const handleDragOver = e => {\n        e.preventDefault();\n    }\n\n    const changeStyle = ({ boardId, taskId }) => {\n        const currentTask = dragItem.current;\n\n        if (currentTask.boardId === boardId && currentTask.taskId === taskId) {\n            return \"dragging project_task_item\";\n        }\n\n        return \"project_task_item\";\n    }\n\n    const ProjectTaskItem = ({ boardId, taskId, task }) => {\n        const currentDate = new Date();\n        const taskDate = new Date(task.due_Date);\n\n        const diff = Math.ceil((taskDate - currentDate) / (1000 * 3600 * 24));\n\n        let dueDateLabel;\n        let classNameDueDate;\n\n        if (task.due_Date) {\n            const taskDay = taskDate.getDate();\n            const taskMonth = taskDate.getMonth();\n            \n            dueDateLabel = taskDay + \" \" + briefMonths[taskMonth];\n            classNameDueDate = \"future_date\";\n            \n            if (diff < 0) {\n                classNameDueDate = \"past_date\";\n            }\n            else if (diff == 0 || diff == 1) {\n                classNameDueDate = \"current_date\";\n            }\n        \n            switch (diff) {\n                case -1: \n                    dueDateLabel = YESTERDAY;\n                    break;\n                case 0: \n                    dueDateLabel = TODAY;\n                    break;\n                case 1: \n                    dueDateLabel = TOMORROW;\n                    break;\n            }\n        }\n\n        return(\n            <div className={dragging ? changeStyle({ boardId, taskId }) : \"project_task_item\"}\n                 draggable={true}\n                 onDragStart={e => handleDragStart(e, { boardId, taskId })}\n                 onDragEnter={dragging ? e => handleDragEnter(e, { boardId, taskId }) : null}\n                 onDragOver={handleDragOver}\n                 id={task.id}\n                 onClick={() => {\n                     setOpenedTask(task);\n                     setOpenUpdateModal(true);\n                 }}\n            >\n                <div className=\"text_holder\" onDragEnter={e => e.preventDefault()}>\n                    <span onClick={() => { \n                            deleteTaskRequest(task.id, dispatch);\n                            setTimeout(() => {\n                                setOpenUpdateModal(false);\n                            }, 0);\n                          }}\n                          className=\"icon_holder\"\n                    >\n                        <TaskIcon/>\n                    </span>\n                    { task.name }\n                </div>\n                <div className=\"down_part\">\n                    <div className=\"avatar_holder\">\n                        <img className=\"avatar\" src={avatar}/>\n                    </div>\n                    <div className=\"date_holder\">\n                        <span className={ classNameDueDate } onDragEnter={e => e.preventDefault()}>{ dueDateLabel }</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const CreateProjectTaskItem = ({ category, priority }) => {\n        const openModalHandler = () => {\n            setPriority(priority);\n            setOpenCreateModal(true);\n            setCategory(category);\n        }\n\n        return(\n            <div className=\"create_project_task_item\">\n                <span onClick={openModalHandler}>Add task</span>\n            </div>\n        )\n    }\n\n    const renderTaskModal = () => {\n        return (\n            openCreateModal ? <TaskModal closeModal={() => setOpenCreateModal(false)} \n                                   type={CREATE} \n                                   category={category}\n                                   currentProject={project}\n                                   priority={priority}\n                              /> : null \n        )\n    }\n\n    const renderTaskUpdateModal = () => {\n        return (\n            openUpdateModal ? <TaskModal task={openedTask}\n                                         closeModal={() => setOpenUpdateModal(false)} \n                                         type={UPDATE} \n                        /> : null \n        )\n    }\n\n    const renderBoards = () => {\n        return (\n            data.map((board, index) => \n                <div className=\"board\">\n                    <div className=\"project_title\">\n                        <span>{ board.title }</span>\n                    </div>\n                    <div className=\"project_tasks\"\n                         id={\"board-\" + index}\n                         onDragEnter={dragging && !board.tasks.length ? e => handleDragEnter(e, { boardId: index, taskId: 0 }) : null}\n                         onDragOver={handleDragOver}\n                    >\n                        { board.tasks.map((task, taskIndex) => <ProjectTaskItem boardId={index} taskId={taskIndex} task={task} />) }\n                        <CreateProjectTaskItem category={board.title} priority={board.tasks.length}/>\n                    </div>\n                </div>\n            )\n        )\n    }\n\n    return(\n        <div className={ selectProjectMode() }>\n            { renderTaskModal() }\n            { renderTaskUpdateModal() }\n            { renderBoards() }\n        </div>\n    )\n}\n\nexport default ProjectBoard;"]},"metadata":{},"sourceType":"module"}