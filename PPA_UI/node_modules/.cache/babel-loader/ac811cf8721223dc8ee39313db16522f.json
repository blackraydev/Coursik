{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/TaskModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createTaskRequest, updateTaskRequest } from \"../../services/taskServices\";\nimport { DateIcon, RemoveIcon } from \"../Common/Icons\";\nimport DatePicker from \"./DatePicker\";\nimport { briefMonths, NODUEDATE, TODAY, TOMORROW, YESTERDAY } from \"../../constants/dateConstants\";\nimport { CREATE, UPDATE } from \"../../constants/modalConstants\";\nimport \"../../styles/TaskModal.css\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\n\nconst CreateModal = ({\n  task,\n  closeModal,\n  type\n}) => {\n  _s();\n\n  const [taskName, setTaskName] = useState(task && task.name || \"\");\n  const [description, setDescription] = useState(task && task.description || \"\");\n  const [selectProject, setSelectProject] = useState(0);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [dueDate, setDueDate] = useState(task && task.due_Date && new Date(task.due_Date) || null);\n  const [isDueDate, setIsDueDate] = useState(!!(task && task.due_Date));\n  const [labelDueDate, setLabelDueDate] = useState(NODUEDATE);\n  const taskNameInput = useRef();\n  const dispatch = useDispatch();\n  const projects = useSelector(store => store.projects);\n  useEffect(() => type === CREATE ? taskNameInput.current.focus() : null, []);\n  useEffect(() => getProjectsRequest(getUserId(), dispatch), []);\n  useEffect(() => {\n    if (!isDueDate) {\n      return setLabelDueDate(NODUEDATE);\n    }\n\n    const currentDate = new Date();\n    const diff = Math.ceil((dueDate - currentDate) / (1000 * 3600 * 24));\n    const taskDay = dueDate.getDate();\n    const taskMonth = dueDate.getMonth();\n\n    switch (diff) {\n      case -1:\n        return setLabelDueDate(YESTERDAY);\n\n      case 0:\n        return setLabelDueDate(TODAY);\n\n      case 1:\n        return setLabelDueDate(TOMORROW);\n\n      default:\n        return setLabelDueDate(taskDay + \" \" + briefMonths[taskMonth]);\n    }\n  }, [dueDate]);\n\n  const setDueDateLabelColor = () => {\n    const className = \"date_picker_holder \";\n\n    if (isDueDate) {\n      const currentDate = new Date();\n      const diff = Math.ceil((dueDate - currentDate) / (1000 * 3600 * 24));\n\n      if (diff < 0) {\n        return className + \"past_due_date\";\n      } else if (diff === 0 || diff === 1) {\n        return className + \"current_due_date\";\n      }\n\n      return className + \"future_due_date\";\n    }\n\n    return className;\n  };\n\n  const submitTaskHandler = () => {\n    if (type === CREATE) createTask();\n    if (type === UPDATE) updateTask();\n    closeModal();\n  };\n\n  const updateTask = async () => {\n    console.log(task);\n    const updatedTask = {\n      id: task.id,\n      user_Id: getUserId(),\n      name: taskName.trim(),\n      description: description,\n      due_Date: dueDate\n    };\n    return await updateTaskRequest(updatedTask, dispatch).then(data => console.log(data)).catch(e => console.log(e));\n  };\n\n  const createTask = async () => {\n    const newTask = {\n      user_Id: getUserId(),\n      name: taskName.trim(),\n      description: description,\n      assign_Date: new Date(),\n      due_Date: dueDate\n    };\n    return await createTaskRequest(newTask, dispatch).then(data => console.log(data)).catch(e => console.log(e));\n  };\n\n  const getUserId = () => sessionStorage.getItem(\"id\");\n\n  const removeDueDateHandler = () => {\n    setDueDate(null);\n    setIsDueDate(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task_modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal_window\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: taskName,\n        onChange: e => setTaskName(e.target.value),\n        className: \"task_name\",\n        placeholder: \"Task Name\",\n        ref: taskNameInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"who_where\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"For\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"assign\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"black2001ray@mail.ru\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"sagidullin-7900@mail.ru\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"choose_project\",\n          children: projects.map(project => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: project.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 51\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date_picker_part\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"due_date\",\n          children: \"Due date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          tabIndex: -1,\n          onFocus: () => setShowDatePicker(true),\n          className: setDueDateLabelColor(),\n          children: [/*#__PURE__*/_jsxDEV(DateIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"date\",\n            children: labelDueDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), isDueDate ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"remove_icon_holder\",\n          onClick: () => removeDueDateHandler(),\n          children: /*#__PURE__*/_jsxDEV(RemoveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }, this) : null, showDatePicker ? /*#__PURE__*/_jsxDEV(DatePicker, {\n          selectedDate: dueDate,\n          setDueDate: setDueDate,\n          setIsDueDate: setIsDueDate,\n          setShowDatePicker: setShowDatePicker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        className: \"description_box\",\n        placeholder: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submit_part\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitTaskHandler(),\n          disabled: !taskName || !taskName.trim(),\n          className: \"submit_task\",\n          children: [type, \" Task\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: closeModal,\n      className: \"overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateModal, \"XDqjKhEwNqq0kAnamr0JRZL4aeI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CreateModal;\nexport default CreateModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateModal\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/TaskModal.jsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","createTaskRequest","updateTaskRequest","DateIcon","RemoveIcon","DatePicker","briefMonths","NODUEDATE","TODAY","TOMORROW","YESTERDAY","CREATE","UPDATE","getProjectsRequest","CreateModal","task","closeModal","type","taskName","setTaskName","name","description","setDescription","selectProject","setSelectProject","showDatePicker","setShowDatePicker","dueDate","setDueDate","due_Date","Date","isDueDate","setIsDueDate","labelDueDate","setLabelDueDate","taskNameInput","dispatch","projects","store","current","focus","getUserId","currentDate","diff","Math","ceil","taskDay","getDate","taskMonth","getMonth","setDueDateLabelColor","className","submitTaskHandler","createTask","updateTask","console","log","updatedTask","id","user_Id","trim","then","data","catch","e","newTask","assign_Date","sessionStorage","getItem","removeDueDateHandler","target","value","map","project"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createTaskRequest, updateTaskRequest } from \"../../services/taskServices\";\nimport { DateIcon, RemoveIcon } from \"../Common/Icons\";\nimport DatePicker from \"./DatePicker\";\nimport { briefMonths, NODUEDATE, TODAY, TOMORROW, YESTERDAY } from \"../../constants/dateConstants\";\nimport { CREATE, UPDATE } from \"../../constants/modalConstants\";\nimport \"../../styles/TaskModal.css\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\n\nconst CreateModal = ({ task, closeModal, type }) => {\n    const [taskName, setTaskName] = useState(task && task.name || \"\");\n    const [description, setDescription] = useState(task && task.description || \"\");\n    const [selectProject, setSelectProject] = useState(0);\n    const [showDatePicker, setShowDatePicker] = useState(false);\n    const [dueDate, setDueDate] = useState(task && task.due_Date && new Date(task.due_Date) || null);\n    const [isDueDate, setIsDueDate] = useState(!!(task && task.due_Date));\n    const [labelDueDate, setLabelDueDate] = useState(NODUEDATE);\n    const taskNameInput = useRef();\n    const dispatch = useDispatch();\n    const projects = useSelector(store => store.projects);\n\n    useEffect(() => type === CREATE ? taskNameInput.current.focus() : null, []);\n    \n    useEffect(() => getProjectsRequest(getUserId(), dispatch), []);\n\n    useEffect(() => {\n        if (!isDueDate) {\n            return setLabelDueDate(NODUEDATE);\n        }\n\n        const currentDate = new Date();\n        const diff = Math.ceil((dueDate - currentDate) / (1000 * 3600 * 24));\n\n        const taskDay = dueDate.getDate();\n        const taskMonth = dueDate.getMonth();\n\n        switch (diff) {\n            case -1: return setLabelDueDate(YESTERDAY);\n            case 0: return setLabelDueDate(TODAY);\n            case 1: return setLabelDueDate(TOMORROW);\n            default: return setLabelDueDate(taskDay + \" \" + briefMonths[taskMonth]);\n        }\n    }, [dueDate]);\n\n    const setDueDateLabelColor = () => {\n        const className = \"date_picker_holder \";\n\n        if (isDueDate) {\n            const currentDate = new Date();\n            const diff = Math.ceil((dueDate - currentDate) / (1000 * 3600 * 24));\n            \n            if (diff < 0) {\n                return className + \"past_due_date\";\n            }\n            else if (diff === 0 || diff === 1) {\n                return className + \"current_due_date\";\n            }\n            \n            return className + \"future_due_date\";\n        }\n\n        return className;\n    }\n\n    const submitTaskHandler = () => {\n        if (type === CREATE) createTask();\n        if (type === UPDATE) updateTask();\n\n        closeModal();\n    }\n\n    const updateTask = async () => {\n        console.log(task);\n\n        const updatedTask = {\n            id: task.id,\n            user_Id: getUserId(),\n            name: taskName.trim(),\n            description: description,\n            due_Date: dueDate\n        }\n\n        return await updateTaskRequest(updatedTask, dispatch)\n            .then(data => console.log(data))\n            .catch(e => console.log(e));\n    }\n\n    const createTask = async () => {\n        const newTask = {\n            user_Id: getUserId(),\n            name: taskName.trim(),\n            description: description,\n            assign_Date: new Date(),\n            due_Date: dueDate\n        }\n\n        return await createTaskRequest(newTask, dispatch)\n            .then(data => console.log(data))\n            .catch(e => console.log(e));\n    }\n\n    const getUserId = () => sessionStorage.getItem(\"id\");\n\n    const removeDueDateHandler = () => {\n        setDueDate(null);\n        setIsDueDate(false);\n    }\n\n    return(\n        <div className=\"task_modal\">\n            <div className=\"modal_window\">\n                <input value={taskName} \n                       onChange={e => setTaskName(e.target.value)} \n                       className=\"task_name\" \n                       placeholder=\"Task Name\"\n                       ref={taskNameInput}\n                />\n                <div className=\"who_where\">\n                    <span>For</span>\n                    <select className=\"assign\">\n                        <option>black2001ray@mail.ru</option>\n                        <option>sagidullin-7900@mail.ru</option>\n                    </select>\n                    <span>in</span>\n                    <select className=\"choose_project\">\n                        { projects.map(project => <option>{ project.name }</option>) }\n                    </select>\n                </div>\n                <div className=\"date_picker_part\">\n                    <span className=\"due_date\">Due date</span>\n                    <div tabIndex={-1} onFocus={() => setShowDatePicker(true)} className={setDueDateLabelColor()}> \n                        <DateIcon/>\n                        <span className=\"date\">{ labelDueDate }</span>\n                    </div>\n                    { \n                        isDueDate ? \n                            <div className=\"remove_icon_holder\" onClick={() => removeDueDateHandler()}> \n                                <RemoveIcon/> \n                            </div> : null \n                    }\n                    { \n                        showDatePicker ? \n                            <DatePicker selectedDate={dueDate} \n                                        setDueDate={setDueDate} \n                                        setIsDueDate={setIsDueDate} \n                                        setShowDatePicker={setShowDatePicker} \n                            /> : null \n                    }\n                </div>\n                <textarea value={description} \n                          onChange={e => setDescription(e.target.value)} \n                          className=\"description_box\" \n                          placeholder=\"Description\"\n                />\n                <div className=\"submit_part\">\n                    <button onClick={() => submitTaskHandler()} disabled={!taskName || !taskName.trim()} className=\"submit_task\">\n                        { type } Task \n                    </button>\n                </div>\n            </div>\n            <div onClick={closeModal} className=\"overlay\"></div>\n        </div>\n    )\n}\n\nexport default CreateModal;"]},"metadata":{},"sourceType":"module"}