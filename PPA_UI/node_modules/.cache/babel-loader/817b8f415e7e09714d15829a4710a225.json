{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\n\nconst ProjectBoard = ({\n  setTab\n}) => {\n  _s();\n\n  const [openModal, setOpenModal] = useState(false);\n  const [category, setCategory] = useState(TO_DO);\n  const {\n    id,\n    projectId\n  } = useParams();\n  const dispatch = useDispatch();\n  const tasks = useSelector(store => store.tasks);\n  const projects = useSelector(store => store.projects);\n  const project = projects.find(proj => proj.id === Number(projectId));\n  const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n  useEffect(async () => await getTasksRequest(id, dispatch), []);\n  useEffect(async () => await getProjectsRequest(id, dispatch), []);\n  useEffect(() => {\n    if (project) {\n      setTab(project.name);\n    }\n  }, [project]);\n\n  const EmptyProjectTaskItem = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty_project_task_item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  };\n\n  const ProjectTaskItem = ({\n    task,\n    index\n  }) => {\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: task.id,\n      index: index,\n      children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"project_task_item\",\n        draggable: true,\n        ref: provided.innerRef,\n        ...provided.draggableProps,\n        ...provided.dragHandleProps,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  };\n\n  const CreateProjectTaskItem = category => {\n    const openModalHandler = () => {\n      setOpenModal(true);\n      setCategory(category);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_project_task_item\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: openModalHandler,\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTaskModal = () => {\n    return openModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      closeModal: () => setOpenModal(false),\n      type: CREATE,\n      category: category.category,\n      currentProject: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }, this) : null;\n  };\n\n  const renderBoards = () => {\n    const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n    return categories.map((ctgry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: ctgry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: `${index}`,\n          children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"project_tasks\",\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [currentTasks.map((task, index) => task.category === ctgry ? /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n              task: task,\n              index: index\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 99\n            }, this) : null), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n              category: ctgry\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }, this), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project_board\",\n    children: [renderTaskModal(), renderBoards()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectBoard, \"FyuIlDzM5uCMEcupm6zRy2LFnVc=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = ProjectBoard;\nexport default ProjectBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectBoard\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useParams","getProjectsRequest","getTasksRequest","TO_DO","IN_PROGRESS","COMPLETED","TaskModal","CREATE","DragDropContext","Draggable","Droppable","ProjectBoard","setTab","openModal","setOpenModal","category","setCategory","id","projectId","dispatch","tasks","store","projects","project","find","proj","Number","currentTasks","filter","task","project_Id","name","EmptyProjectTaskItem","ProjectTaskItem","index","provided","innerRef","draggableProps","dragHandleProps","CreateProjectTaskItem","openModalHandler","renderTaskModal","renderBoards","categories","map","ctgry","droppableProps","placeholder"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,+BAA9C;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,OAAO,+BAAP;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAACM,KAAD,CAAxC;AACA,QAAM;AAAEc,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAoBlB,SAAS,EAAnC;AACA,QAAMmB,QAAQ,GAAGrB,WAAW,EAA5B;AACA,QAAMsB,KAAK,GAAGrB,WAAW,CAACsB,KAAK,IAAIA,KAAK,CAACD,KAAhB,CAAzB;AACA,QAAME,QAAQ,GAAGvB,WAAW,CAACsB,KAAK,IAAIA,KAAK,CAACC,QAAhB,CAA5B;AACA,QAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYS,MAAM,CAACR,SAAD,CAAxC,CAAhB;AACA,QAAMS,YAAY,GAAGP,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,UAAL,KAAoBJ,MAAM,CAACR,SAAD,CAA/C,CAArB;AAEAtB,EAAAA,SAAS,CAAC,YAAY,MAAMM,eAAe,CAACe,EAAD,EAAKE,QAAL,CAAlC,EAAkD,EAAlD,CAAT;AACAvB,EAAAA,SAAS,CAAC,YAAY,MAAMK,kBAAkB,CAACgB,EAAD,EAAKE,QAAL,CAArC,EAAqD,EAArD,CAAT;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,OAAJ,EAAa;AACTX,MAAAA,MAAM,CAACW,OAAO,CAACQ,IAAT,CAAN;AACH;AACJ,GAJQ,EAIN,CAACR,OAAD,CAJM,CAAT;;AAMA,QAAMS,oBAAoB,GAAG,MAAM;AAC/B,wBACI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJD;;AAMA,QAAMC,eAAe,GAAG,CAAC;AAAEJ,IAAAA,IAAF;AAAQK,IAAAA;AAAR,GAAD,KAAqB;AACzC,wBACI,QAAC,SAAD;AAAyB,MAAA,WAAW,EAAEL,IAAI,CAACZ,EAA3C;AAA+C,MAAA,KAAK,EAAEiB,KAAtD;AAAA,gBACMC,QAAD,iBACG;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAkC,QAAA,SAAS,MAA3C;AAA4C,QAAA,GAAG,EAAEA,QAAQ,CAACC,QAA1D;AAAA,WAAwED,QAAQ,CAACE,cAAjF;AAAA,WAAqGF,QAAQ,CAACG,eAA9G;AAAA,+BACI;AAAA,oBAAKT,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFR,OAAgBF,IAAI,CAACZ,EAArB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVD;;AAYA,QAAMsB,qBAAqB,GAAGxB,QAAQ,IAAI;AACtC,UAAMyB,gBAAgB,GAAG,MAAM;AAC3B1B,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,WAAW,CAACD,QAAD,CAAX;AACH,KAHD;;AAKA,wBACI;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA,6BACI;AAAM,QAAA,OAAO,EAAEyB,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAXD;;AAaA,QAAMC,eAAe,GAAG,MAAM;AAC1B,WACI5B,SAAS,gBAAG,QAAC,SAAD;AAAW,MAAA,UAAU,EAAE,MAAMC,YAAY,CAAC,KAAD,CAAzC;AACW,MAAA,IAAI,EAAEP,MADjB;AAEW,MAAA,QAAQ,EAAEQ,QAAQ,CAACA,QAF9B;AAGW,MAAA,cAAc,EAAEQ;AAH3B;AAAA;AAAA;AAAA;AAAA,YAAH,GAIQ,IALrB;AAOH,GARD;;AAUA,QAAMmB,YAAY,GAAG,MAAM;AACvB,UAAMC,UAAU,GAAG,CAACxC,KAAD,EAAQC,WAAR,EAAqBC,SAArB,CAAnB;AAEA,WACIsC,UAAU,CAACC,GAAX,CAAe,CAACC,KAAD,EAAQX,KAAR,kBACX;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI;AAAA,oBAAQW;AAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,eAAD;AAAA,+BACI,QAAC,SAAD;AAAuB,UAAA,WAAW,EAAG,GAAEX,KAAM,EAA7C;AAAA,oBACMC,QAAD,iBACG;AAAI,YAAA,SAAS,EAAC,eAAd;AAA8B,YAAA,GAAG,EAAEA,QAAQ,CAACC,QAA5C;AAAA,eAA0DD,QAAQ,CAACW,cAAnE;AAAA,uBACMnB,YAAY,CAACiB,GAAb,CAAiB,CAACf,IAAD,EAAOK,KAAP,KAAiBL,IAAI,CAACd,QAAL,KAAkB8B,KAAlB,gBAA0B,QAAC,eAAD;AAAiB,cAAA,IAAI,EAAEhB,IAAvB;AAA6B,cAAA,KAAK,EAAEK;AAApC;AAAA;AAAA;AAAA;AAAA,oBAA1B,GAAyE,IAA3G,CADN,eAEI,QAAC,qBAAD;AAAuB,cAAA,QAAQ,EAAGW;AAAlC;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGMV,QAAQ,CAACY,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,WAAgBb,KAAhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;AAoBH,GAvBD;;AAyBA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,eACMO,eAAe,EADrB,EAEMC,YAAY,EAFlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA3FD;;GAAM/B,Y;UAGwBX,S,EACTF,W,EACHC,W,EACGA,W;;;KANfY,Y;AA6FN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\n\nconst ProjectBoard = ({ setTab }) => {\n    const [openModal, setOpenModal] = useState(false);\n    const [category, setCategory] = useState(TO_DO);\n    const { id, projectId } = useParams();\n    const dispatch = useDispatch();\n    const tasks = useSelector(store => store.tasks);\n    const projects = useSelector(store => store.projects);\n    const project = projects.find(proj => proj.id === Number(projectId));\n    const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n\n    useEffect(async () => await getTasksRequest(id, dispatch), []);\n    useEffect(async () => await getProjectsRequest(id, dispatch), []);\n\n    useEffect(() => {\n        if (project) {\n            setTab(project.name);\n        }\n    }, [project]);\n\n    const EmptyProjectTaskItem = () => {\n        return(\n            <div className=\"empty_project_task_item\"></div>\n        )\n    }\n\n    const ProjectTaskItem = ({ task, index }) => {\n        return(\n            <Draggable key={task.id} draggableId={task.id} index={index}>\n                {(provided) => \n                    <li className=\"project_task_item\" draggable ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                        <p>{ task.name }</p>\n                    </li>\n                }\n            </Draggable>\n        )\n    }\n\n    const CreateProjectTaskItem = category => {\n        const openModalHandler = () => {\n            setOpenModal(true);\n            setCategory(category);\n        }\n        \n        return(\n            <div className=\"create_project_task_item\">\n                <span onClick={openModalHandler}>Add task</span>\n            </div>\n        )\n    }\n\n    const renderTaskModal = () => {\n        return(\n            openModal ? <TaskModal closeModal={() => setOpenModal(false)} \n                                   type={CREATE} \n                                   category={category.category}\n                                   currentProject={project} \n                        /> : null \n        )\n    }\n\n    const renderBoards = () => {\n        const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n\n        return (\n            categories.map((ctgry, index) => \n                <div className=\"board\" >\n                    <div className=\"project_title\">\n                        <span>{ ctgry }</span>\n                    </div>\n                    <DragDropContext>\n                        <Droppable key={index} droppableId={`${index}`}>\n                            {(provided) => \n                                <ul className=\"project_tasks\" ref={provided.innerRef} {...provided.droppableProps}>\n                                    { currentTasks.map((task, index) => task.category === ctgry ? <ProjectTaskItem task={task} index={index}/> : null) }\n                                    <CreateProjectTaskItem category={ ctgry }/>\n                                    { provided.placeholder }\n                                </ul>\n                            }\n                        </Droppable>\n                    </DragDropContext>\n                </div>\n             )\n        )\n    }\n\n    return(\n        <div className=\"project_board\">\n            { renderTaskModal() }\n            { renderBoards() }\n        </div>\n    )\n}\n\nexport default ProjectBoard;"]},"metadata":{},"sourceType":"module"}