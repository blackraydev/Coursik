{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/TaskItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { briefMonths, TODAY, TOMORROW, YESTERDAY } from \"../../constants/dateConstants\";\nimport { deleteTaskRequest } from \"../../services/taskServices\";\nimport { TaskIcon } from \"../Common/Icons\";\nimport CreateModal from \"./TaskModal\";\nimport { UPDATE } from \"../../constants/modalConstants\";\nimport \"../../styles/TaskItem.css\";\n\nconst TaskItem = ({\n  task\n}) => {\n  _s();\n\n  const [openModal, setOpenModal] = useState(false);\n  const dispatch = useDispatch();\n  const currentDate = new Date();\n  const taskDate = new Date(task.due_Date);\n  const diff = Math.ceil((taskDate - currentDate) / (1000 * 3600 * 24));\n  let dueDateLabel;\n  let classNameDueDate;\n\n  if (task.due_Date) {\n    const taskDay = taskDate.getDate();\n    const taskMonth = taskDate.getMonth();\n    dueDateLabel = taskDay + \" \" + briefMonths[taskMonth];\n    classNameDueDate = \"future_date\";\n\n    if (diff < 0) {\n      classNameDueDate = \"past_date\";\n    } else if (diff == 0 || diff == 1) {\n      classNameDueDate = \"current_date\";\n    }\n\n    switch (diff) {\n      case -1:\n        dueDateLabel = YESTERDAY;\n        break;\n\n      case 0:\n        dueDateLabel = TODAY;\n        break;\n\n      case 1:\n        dueDateLabel = TOMORROW;\n        break;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task_item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => deleteTaskRequest(task.id, dispatch),\n      className: \"icon_holder\",\n      children: /*#__PURE__*/_jsxDEV(TaskIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setOpenModal(true),\n      className: \"content_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classNameDueDate,\n          children: dueDateLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), openModal ? /*#__PURE__*/_jsxDEV(CreateModal, {\n      task: task,\n      closeModal: () => setOpenModal(false),\n      type: UPDATE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 27\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskItem, \"7K4ZzCFbh0N6JBXWZRwM3sZWaJo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TaskItem;\nexport default TaskItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/TaskItem.jsx"],"names":["React","useState","useDispatch","useSelector","briefMonths","TODAY","TOMORROW","YESTERDAY","deleteTaskRequest","TaskIcon","CreateModal","UPDATE","TaskItem","task","openModal","setOpenModal","dispatch","currentDate","Date","taskDate","due_Date","diff","Math","ceil","dueDateLabel","classNameDueDate","taskDay","getDate","taskMonth","getMonth","id","name"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { briefMonths, TODAY, TOMORROW, YESTERDAY } from \"../../constants/dateConstants\";\nimport { deleteTaskRequest } from \"../../services/taskServices\";\nimport { TaskIcon } from \"../Common/Icons\";\nimport CreateModal from \"./TaskModal\";\nimport { UPDATE } from \"../../constants/modalConstants\";\nimport \"../../styles/TaskItem.css\";\n\nconst TaskItem = ({ task }) => {\n    const [openModal, setOpenModal] = useState(false);\n    const dispatch = useDispatch();\n\n    const currentDate = new Date();\n    const taskDate = new Date(task.due_Date);\n\n    const diff = Math.ceil((taskDate - currentDate) / (1000 * 3600 * 24));\n\n    let dueDateLabel;\n    let classNameDueDate;\n\n    if (task.due_Date) {\n        const taskDay = taskDate.getDate();\n        const taskMonth = taskDate.getMonth();\n        \n        dueDateLabel = taskDay + \" \" + briefMonths[taskMonth];\n        classNameDueDate = \"future_date\";\n        \n        if (diff < 0) {\n            classNameDueDate = \"past_date\";\n        }\n        else if (diff == 0 || diff == 1) {\n            classNameDueDate = \"current_date\";\n        }\n    \n        switch (diff) {\n            case -1: \n                dueDateLabel = YESTERDAY;\n                break;\n            case 0: \n                dueDateLabel = TODAY;\n                break;\n            case 1: \n                dueDateLabel = TOMORROW;\n                break;\n        }\n    }\n\n    return(\n        <div className=\"task_item\">\n            <div onClick={() => deleteTaskRequest(task.id, dispatch)} className=\"icon_holder\">\n                <TaskIcon/>\n            </div>\n            <div onClick={() => setOpenModal(true)} className=\"content_holder\">\n                <div className=\"text_holder\">\n                    <span  className=\"text\">{ task.name }</span>\n                </div>\n                <div className=\"date_holder\">\n                    <span className={ classNameDueDate }>{ dueDateLabel }</span>\n                </div>\n            </div>\n            { openModal ? <CreateModal task={task} closeModal={() => setOpenModal(false)} type={UPDATE}/> : null }\n        </div>\n    );\n}\n\nexport default TaskItem;"]},"metadata":{},"sourceType":"module"}