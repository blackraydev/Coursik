{"ast":null,"code":"import { GET_PROJECTS, CREATE_PROJECT, DELETE_PROJECT, UPDATE_PROJECT } from \"./constants\";\nconst initialState = [];\nexport const projectsReducer = (state = initialState, action) => {\n  let newState = [];\n\n  switch (action.type) {\n    case GET_PROJECTS:\n      newState = [...action.payload];\n      return newState;\n\n    case CREATE_PROJECT:\n      newState = [...state, action.payload];\n      return newState;\n\n    case UPDATE_PROJECT:\n      newState = [...state].map(project => {\n        if (project.id === action.payload.id) return action.payload;\n        return project;\n      });\n\n    case DELETE_PROJECT:\n      newState = [...state].filter(project => project.id !== action.payload);\n      return newState;\n\n    default:\n      return state;\n  }\n};\nexport default projectsReducer;","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/redux/projectsReducer.js"],"names":["GET_PROJECTS","CREATE_PROJECT","DELETE_PROJECT","UPDATE_PROJECT","initialState","projectsReducer","state","action","newState","type","payload","map","project","id","filter"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,cAAvC,EAAuDC,cAAvD,QAA6E,aAA7E;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC7D,MAAIC,QAAQ,GAAG,EAAf;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKT,YAAL;AACIQ,MAAAA,QAAQ,GAAG,CAAC,GAAGD,MAAM,CAACG,OAAX,CAAX;AACA,aAAOF,QAAP;;AACJ,SAAKP,cAAL;AACIO,MAAAA,QAAQ,GAAG,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACG,OAAlB,CAAX;AACA,aAAOF,QAAP;;AACJ,SAAKL,cAAL;AACIK,MAAAA,QAAQ,GAAG,CAAC,GAAGF,KAAJ,EAAWK,GAAX,CAAeC,OAAO,IAAI;AACjC,YAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAP,CAAeG,EAAlC,EACI,OAAON,MAAM,CAACG,OAAd;AACJ,eAAOE,OAAP;AACH,OAJU,CAAX;;AAKJ,SAAKV,cAAL;AACIM,MAAAA,QAAQ,GAAG,CAAC,GAAGF,KAAJ,EAAWQ,MAAX,CAAkBF,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAnD,CAAX;AACA,aAAOF,QAAP;;AACJ;AACI,aAAOF,KAAP;AAjBR;AAmBH,CAtBM;AAwBP,eAAeD,eAAf","sourcesContent":["import { GET_PROJECTS, CREATE_PROJECT, DELETE_PROJECT, UPDATE_PROJECT } from \"./constants\";\n\nconst initialState = [];\n\nexport const projectsReducer = (state = initialState, action) => {\n    let newState = [];\n\n    switch (action.type) {\n        case GET_PROJECTS:\n            newState = [...action.payload];\n            return newState;\n        case CREATE_PROJECT:\n            newState = [...state, action.payload];\n            return newState;\n        case UPDATE_PROJECT:\n            newState = [...state].map(project => {\n                if (project.id === action.payload.id)\n                    return action.payload;\n                return project;\n            })\n        case DELETE_PROJECT:\n            newState = [...state].filter(project => project.id !== action.payload);\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default projectsReducer;"]},"metadata":{},"sourceType":"module"}