{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest, updateTasksStatusRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({\n  setTab\n}) => {\n  _s();\n\n  const [openModal, setOpenModal] = useState(false);\n  const [category, setCategory] = useState(TO_DO);\n  const {\n    id,\n    projectId\n  } = useParams();\n  const dispatch = useDispatch();\n  const tasks = useSelector(store => store.tasks);\n  const projects = useSelector(store => store.projects);\n  const project = projects.find(proj => proj.id === Number(projectId));\n  let currentTasks = tasks.filter(task => task.project_Id === Number(projectId)).sort((taskA, taskB) => taskA.priority - taskB.priority);\n  const [data, setData] = useState(updateData());\n  const dragItem = useRef();\n  const dragNode = useRef();\n  const [dragging, setDragging] = useState(false);\n  const [canExecuteQuery, setCanExecuteQuery] = useState(false);\n  useEffect(() => {\n    if (project) {\n      setTab(project.name);\n    }\n  }, [project]);\n  useEffect(async () => await getTasksRequest(id, dispatch), []);\n  useEffect(async () => await getProjectsRequest(id, dispatch), []);\n  useEffect(async () => {\n    console.log(\"UPDATED_STATUS\");\n    await updateTasksStatus().then(setData(updateData()));\n  }, [tasks, canExecuteQuery]);\n  useEffect(() => {\n    console.log(\"UPDATED_DATA\");\n    setData(updateData());\n  }, [tasks]);\n\n  function updateData() {\n    const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n    const newData = categories.map(category => {\n      return {\n        title: category,\n        tasks: []\n      };\n    });\n    currentTasks.forEach(task => {\n      switch (task.category) {\n        case TO_DO:\n          newData[0].tasks.push(task);\n          break;\n\n        case IN_PROGRESS:\n          newData[1].tasks.push(task);\n          break;\n\n        case COMPLETED:\n          newData[2].tasks.push(task);\n          break;\n      }\n    });\n    return newData;\n  }\n\n  const updateTasksStatus = async () => {\n    const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n    const newTasks = [];\n    data.forEach((board, boardId) => {\n      board.tasks.forEach((task, taskId) => {\n        const edittedTask = currentTasks.find(tempTask => tempTask.id == task.id);\n        newTasks.push({ ...edittedTask,\n          category: categories[boardId],\n          priority: taskId + 1\n        });\n      });\n    });\n    return await updateTasksStatusRequest(newTasks).then(data => data).catch(e => console.log(e));\n  };\n\n  const handleDragStart = (e, params) => {\n    dragItem.current = params;\n    dragNode.current = e.target;\n    dragNode.current.addEventListener(\"dragend\", e => handleDragEnd(e));\n    setTimeout(() => {\n      setCanExecuteQuery(false);\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnd = e => {\n    e.preventDefault();\n    setDragging(false);\n    setCanExecuteQuery(true);\n    dragNode.current.removeEventListener(\"dragend\", e => handleDragEnd(e));\n    dragItem.current = null;\n    dragNode.current = null;\n  };\n\n  const handleDragEnter = (e, params) => {\n    const currentItem = dragItem.current;\n\n    if (e.target.id !== dragNode.current.id) {\n      setData(oldData => {\n        let newList = JSON.parse(JSON.stringify(oldData));\n        newList[params.boardId].tasks.splice(params.taskId, 0, newList[currentItem.boardId].tasks.splice(currentItem.taskId, 1)[0]);\n        dragItem.current = params;\n        return newList;\n      });\n    }\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n\n  const changeStyle = ({\n    boardId,\n    taskId\n  }) => {\n    const currentTask = dragItem.current;\n\n    if (currentTask.boardId === boardId && currentTask.taskId === taskId) {\n      return \"dragging project_task_item\";\n    }\n\n    return \"project_task_item\";\n  };\n\n  const ProjectTaskItem = ({\n    boardId,\n    taskId,\n    task\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: dragging ? changeStyle({\n        boardId,\n        taskId\n      }) : \"project_task_item\",\n      draggable: true,\n      onDragStart: e => handleDragStart(e, {\n        boardId,\n        taskId\n      }),\n      onDragEnter: dragging ? e => handleDragEnter(e, {\n        boardId,\n        taskId\n      }) : null,\n      onDragOver: handleDragOver,\n      id: task.id,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this);\n  };\n\n  const CreateProjectTaskItem = ({\n    boardId,\n    category\n  }) => {\n    const openModalHandler = () => {\n      setOpenModal(true);\n      setCategory(category);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_project_task_item\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: openModalHandler,\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTaskModal = () => {\n    return openModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      closeModal: () => setOpenModal(false),\n      type: CREATE,\n      category: category,\n      currentProject: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }, this) : null;\n  };\n\n  const renderBoards = () => {\n    return data.map((board, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: board.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_tasks\",\n        id: \"board-\" + index,\n        onDragEnter: dragging && !board.tasks.length ? e => handleDragEnter(e, {\n          boardId: index,\n          taskId: 0\n        }) : null,\n        onDragOver: handleDragOver,\n        children: [board.tasks.map((task, taskIndex) => /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n          boardId: index,\n          taskId: taskIndex,\n          task: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 64\n        }, this)), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n          boardId: index,\n          category: board.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project_board\",\n    children: [renderTaskModal(), renderBoards()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectBoard, \"Mu7N87FZsDhzmcWpflvkh5B4dvE=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = ProjectBoard;\nexport default ProjectBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectBoard\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","useParams","getProjectsRequest","getTasksRequest","updateTasksStatusRequest","TO_DO","IN_PROGRESS","COMPLETED","TaskModal","CREATE","ProjectBoard","setTab","openModal","setOpenModal","category","setCategory","id","projectId","dispatch","tasks","store","projects","project","find","proj","Number","currentTasks","filter","task","project_Id","sort","taskA","taskB","priority","data","setData","updateData","dragItem","dragNode","dragging","setDragging","canExecuteQuery","setCanExecuteQuery","name","console","log","updateTasksStatus","then","categories","newData","map","title","forEach","push","newTasks","board","boardId","taskId","edittedTask","tempTask","catch","e","handleDragStart","params","current","target","addEventListener","handleDragEnd","setTimeout","preventDefault","removeEventListener","handleDragEnter","currentItem","oldData","newList","JSON","parse","stringify","splice","handleDragOver","changeStyle","currentTask","ProjectTaskItem","CreateProjectTaskItem","openModalHandler","renderTaskModal","renderBoards","index","length","taskIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest, updateTasksStatusRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({ setTab }) => {\n    const [openModal, setOpenModal] = useState(false);\n    const [category, setCategory] = useState(TO_DO);\n    const { id, projectId } = useParams();\n    const dispatch = useDispatch();\n    const tasks = useSelector(store => store.tasks);\n    const projects = useSelector(store => store.projects);\n    const project = projects.find(proj => proj.id === Number(projectId));\n    let currentTasks = tasks.filter(task => task.project_Id === Number(projectId))\n                              .sort((taskA, taskB) => taskA.priority - taskB.priority);\n    const [data, setData] = useState(updateData());\n    const dragItem = useRef();\n    const dragNode = useRef();\n    const [dragging, setDragging] = useState(false);\n    const [canExecuteQuery, setCanExecuteQuery] = useState(false);\n\n    useEffect(() => {\n        if (project) {\n            setTab(project.name);\n        }\n    }, [project]);\n\n    useEffect(async () => await getTasksRequest(id, dispatch), []);\n    useEffect(async () => await getProjectsRequest(id, dispatch), []);\n\n    useEffect(async () => {\n        console.log(\"UPDATED_STATUS\")\n        await updateTasksStatus()\n            .then(setData(updateData()))\n    }, [tasks, canExecuteQuery]);\n\n    useEffect(() => {\n        console.log(\"UPDATED_DATA\")\n        setData(updateData());\n    }, [tasks]);\n\n    function updateData () {\n        const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n        const newData = categories.map(category => { return { title: category, tasks: [] } });\n\n        currentTasks.forEach(task => {\n            switch (task.category) {\n                case TO_DO:\n                    newData[0].tasks.push(task);\n                    break;\n                case IN_PROGRESS:\n                    newData[1].tasks.push(task);\n                    break;\n                case COMPLETED:\n                    newData[2].tasks.push(task);\n                    break;\n            }\n        })\n\n        return newData;\n    }\n\n    const updateTasksStatus = async () => {\n        const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n        const newTasks = [];\n\n        data.forEach((board, boardId) => {\n            board.tasks.forEach((task, taskId) => {\n                const edittedTask = currentTasks.find(tempTask => tempTask.id == task.id);\n                newTasks.push({\n                    ...edittedTask,\n                    category: categories[boardId],\n                    priority: taskId + 1\n                });\n            })\n        });\n\n        return await updateTasksStatusRequest(newTasks)\n            .then(data => data)\n            .catch(e => console.log(e));\n    }\n\n    const handleDragStart = (e, params) => {\n        dragItem.current = params;\n        dragNode.current = e.target;\n        dragNode.current.addEventListener(\"dragend\", e => handleDragEnd(e));\n        setTimeout(() => {\n            setCanExecuteQuery(false);\n            setDragging(true);\n        }, 0);\n    }\n\n    const handleDragEnd = e => {\n        e.preventDefault();\n        setDragging(false);\n        setCanExecuteQuery(true);\n\n        dragNode.current.removeEventListener(\"dragend\", e => handleDragEnd(e));\n        dragItem.current = null;\n        dragNode.current = null;\n    }\n\n    const handleDragEnter = (e, params) => {\n        const currentItem = dragItem.current;\n\n        if (e.target.id !== dragNode.current.id) {\n            setData(oldData => {\n                let newList = JSON.parse(JSON.stringify(oldData));\n                newList[params.boardId].tasks.splice(params.taskId, 0, newList[currentItem.boardId].tasks.splice(currentItem.taskId, 1)[0]);\n                dragItem.current = params;\n                return newList;\n            })\n        }\n    }\n\n    const handleDragOver = e => {\n        e.preventDefault();\n    }\n\n    const changeStyle = ({ boardId, taskId }) => {\n        const currentTask = dragItem.current;\n\n        if (currentTask.boardId === boardId && currentTask.taskId === taskId) {\n            return \"dragging project_task_item\";\n        }\n\n        return \"project_task_item\";\n    }\n\n    const ProjectTaskItem = ({ boardId, taskId, task }) => {\n        return(\n            <div className={dragging ? changeStyle({ boardId, taskId }) : \"project_task_item\"}\n                 draggable={true}\n                 onDragStart={e => handleDragStart(e, { boardId, taskId })}\n                 onDragEnter={dragging ? e => handleDragEnter(e, { boardId, taskId }) : null}\n                 onDragOver={handleDragOver}\n                 id={task.id}\n            >\n                <span>{ task.name }</span>\n            </div>\n        )\n    }\n\n    const CreateProjectTaskItem = ({ boardId, category }) => {\n        const openModalHandler = () => {\n            setOpenModal(true);\n            setCategory(category);\n        }\n        \n        return(\n            <div className=\"create_project_task_item\">\n                <span onClick={openModalHandler}>Add task</span>\n            </div>\n        )\n    }\n\n    const renderTaskModal = () => {\n        return(\n            openModal ? <TaskModal closeModal={() => setOpenModal(false)} \n                                   type={CREATE} \n                                   category={category}\n                                   currentProject={project}\n                        /> : null \n        )\n    }\n\n    const renderBoards = () => {\n        return (\n            data.map((board, index) => \n                <div className=\"board\">\n                    <div className=\"project_title\">\n                        <span>{ board.title }</span>\n                    </div>\n                    <div className=\"project_tasks\"\n                         id={\"board-\" + index}\n                         onDragEnter={dragging && !board.tasks.length ? e => handleDragEnter(e, { boardId: index, taskId: 0 }) : null}\n                         onDragOver={handleDragOver}\n                    >\n                        { board.tasks.map((task, taskIndex) => <ProjectTaskItem boardId={index} taskId={taskIndex} task={task} />) }\n                        <CreateProjectTaskItem boardId={index} category={ board.title }/>\n                    </div>\n                </div>\n            )\n        )\n    }\n\n    return(\n        <div className=\"project_board\">\n            { renderTaskModal() }\n            { renderBoards() }\n        </div>\n    )\n}\n\nexport default ProjectBoard;"]},"metadata":{},"sourceType":"module"}