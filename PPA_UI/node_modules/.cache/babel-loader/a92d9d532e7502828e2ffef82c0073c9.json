{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({\n  setTab\n}) => {\n  _s();\n\n  const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n  const dispatch = useDispatch();\n  const {\n    id,\n    projectId\n  } = useParams();\n  const [boards, setBoards] = useState(getBoards());\n  const [currentBoard, setCurrentBoard] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [openModal, setOpenModal] = useState(false);\n  const [category, setCategory] = useState(TO_DO);\n  const tasks = useSelector(store => store.tasks);\n  const projects = useSelector(store => store.projects);\n  const project = projects.find(proj => proj.id === Number(projectId));\n  const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n  useEffect(async () => await getTasksRequest(id, dispatch), []);\n  useEffect(async () => await getProjectsRequest(id, dispatch), []);\n  useEffect(() => {\n    if (project) {\n      setTab(project.name);\n    }\n  }, [project]);\n\n  function getBoards() {\n    const tempBoards = {};\n    categories.forEach(ctgry => {\n      tempBoards[ctgry] = currentTasks.filter(task => task.category === ctgry);\n    });\n    return tempBoards;\n  }\n\n  const boardDrop = e => {\n    e.preventDefault();\n    e.target.style.background = \"unset\";\n    const taskId = e.dataTransfer.getData(\"task_Id\");\n    const task = document.querySelector(`#${taskId}`);\n    task.style.display = \"flex\";\n    e.target.appendChild(task);\n  };\n\n  const boardDragEnter = e => {\n    e.target.style.background = \"linear-gradient(to bottom, rgba(44, 45, 56, 1), rgba(36, 37, 45, 0.15))\";\n  };\n\n  const boardDragLeave = e => {\n    e.target.style.background = \"unset\";\n  };\n\n  const boardDragOver = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const taskDragOver = e => {\n    e.preventDefault();\n\n    if (e.target.className == \"project_task_item\") {\n      e.target.style.boxShadow = \"0px 10px 5px 1px rgba(0, 0, 15, .05)\";\n    }\n  };\n\n  const taskDragLeave = e => {\n    e.target.style.boxShadow = \"none\";\n  };\n\n  const taskDragStart = (e, board, task) => {\n    setCurrentBoard(board);\n    setCurrentTask(task);\n  };\n\n  const taskDragEnd = e => {\n    e.target.style.boxShadow = \"none\";\n  };\n\n  const taskDrop = (e, board, task) => {\n    e.preventDefault();\n    const currentIndex = currentBoard.indexOf(currentTask);\n    currentBoard.splice(currentIndex, 1);\n    const dropIndex = board.indexOf(task);\n    board.splice(dropIndex + 1, 0, 1);\n    setCurrentTask;\n  }; // const taskDragLeave = e => {\n  //     e.target.style.background = \"rgb(65, 65, 80)\";\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  // }\n  // const taskDragEnter = e => {\n  //     e.target.style.background = \"rgb(65, 65, 80)\";\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  // }\n  // const taskDragStart = e => {\n  //     const target = e.target;\n  //     e.dataTransfer.setData(\"task_Id\", target.id);\n  //     setTimeout(() => {\n  //         target.style.display = \"hidden\";\n  //     }, 0);\n  // }\n  // \n  // const taskDragOver = e => {\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  // }\n\n\n  const EmptyProjectTaskItem = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty_project_task_item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this);\n  };\n\n  const ProjectTaskItem = ({\n    board,\n    task\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project_task_item\",\n      draggable: true,\n      onDragEnd: taskDragEnd,\n      onDragLeave: taskDragLeave,\n      onDragStart: e => taskDragStart(e, board, task),\n      onDragOver: taskDragOver,\n      onDrop: e => taskDrop(e, board, task),\n      id: \"task-\" + task.id,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  };\n\n  const CreateProjectTaskItem = category => {\n    const openModalHandler = () => {\n      setOpenModal(true);\n      setCategory(category);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_project_task_item\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: openModalHandler,\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTaskModal = () => {\n    return openModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      closeModal: () => setOpenModal(false),\n      type: CREATE,\n      category: category.category,\n      currentProject: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }, this) : null;\n  };\n\n  const renderBoards = () => {\n    return categories.map(ctgry => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: ctgry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_tasks\",\n        onDrop: boardDrop,\n        onDragOver: boardDragOver,\n        onDragEnter: boardDragEnter,\n        onDragLeave: boardDragLeave,\n        children: [currentTasks.map(task => task.category === ctgry ? /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n          board: boards[ctgry],\n          task: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 78\n        }, this) : null), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n          category: ctgry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this)) // categories.map(ctgry => \n    //     <div className=\"board\">\n    //         <div className=\"project_title\">\n    //             <span>{ ctgry }</span>\n    //         </div>\n    //         <div className=\"project_tasks\"\n    //              onDrop={boardDrop}\n    //              onDragOver={boardDragOver}\n    //              onDragEnter={boardDragEnter}\n    //              onDragLeave={boardDragLeave}\n    //         >\n    //             { boards[ctgry] && boards[ctgry].map(task => task.category === ctgry ? <ProjectTaskItem board={boards[ctgry]} task={task} /> : null) }\n    //             <CreateProjectTaskItem category={ ctgry }/>\n    //         </div>\n    //     </div>\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project_board\",\n    children: [renderTaskModal(), renderBoards()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectBoard, \"Dpmx7d/NuvYcaw6nvRE2fWda7VI=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector];\n});\n\n_c = ProjectBoard;\nexport default ProjectBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectBoard\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useParams","getProjectsRequest","getTasksRequest","TO_DO","IN_PROGRESS","COMPLETED","TaskModal","CREATE","ProjectBoard","setTab","categories","dispatch","id","projectId","boards","setBoards","getBoards","currentBoard","setCurrentBoard","currentTask","setCurrentTask","openModal","setOpenModal","category","setCategory","tasks","store","projects","project","find","proj","Number","currentTasks","filter","task","project_Id","name","tempBoards","forEach","ctgry","boardDrop","e","preventDefault","target","style","background","taskId","dataTransfer","getData","document","querySelector","display","appendChild","boardDragEnter","boardDragLeave","boardDragOver","stopPropagation","taskDragOver","className","boxShadow","taskDragLeave","taskDragStart","board","taskDragEnd","taskDrop","currentIndex","indexOf","splice","dropIndex","EmptyProjectTaskItem","ProjectTaskItem","CreateProjectTaskItem","openModalHandler","renderTaskModal","renderBoards","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({ setTab }) => {\n    const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n    const dispatch = useDispatch();\n    const { id, projectId } = useParams();\n    const [boards, setBoards] = useState(getBoards());\n    const [currentBoard, setCurrentBoard] = useState(null);\n    const [currentTask, setCurrentTask] = useState(null);\n    const [openModal, setOpenModal] = useState(false);\n    const [category, setCategory] = useState(TO_DO);\n    const tasks = useSelector(store => store.tasks);\n    const projects = useSelector(store => store.projects);\n    const project = projects.find(proj => proj.id === Number(projectId));\n    const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n\n    useEffect(async () => await getTasksRequest(id, dispatch), []);\n    useEffect(async () => await getProjectsRequest(id, dispatch), []);\n\n    useEffect(() => {\n        if (project) {\n            setTab(project.name);\n        }\n    }, [project]);\n\n    function getBoards() {\n        const tempBoards = {};\n\n        categories.forEach(ctgry => {\n            tempBoards[ctgry] = currentTasks.filter(task => task.category === ctgry);\n        });\n        \n        return tempBoards;\n    }\n\n    \n\n    const boardDrop = e => {\n        e.preventDefault();\n        e.target.style.background = \"unset\";\n\n        const taskId = e.dataTransfer.getData(\"task_Id\");\n        const task = document.querySelector(`#${taskId}`);\n\n        task.style.display = \"flex\";\n\n        e.target.appendChild(task);\n    }\n\n    const boardDragEnter = e => {\n        e.target.style.background = \"linear-gradient(to bottom, rgba(44, 45, 56, 1), rgba(36, 37, 45, 0.15))\";\n    }\n\n    const boardDragLeave = e => {\n        e.target.style.background = \"unset\";\n    }\n\n    const boardDragOver = e => {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n\n\n\n\n\n    const taskDragOver = e => {\n        e.preventDefault();\n\n        if (e.target.className == \"project_task_item\") {\n            e.target.style.boxShadow = \"0px 10px 5px 1px rgba(0, 0, 15, .05)\";\n        }\n    }\n\n    const taskDragLeave = e => {\n        e.target.style.boxShadow = \"none\";\n    }\n\n    const taskDragStart = (e, board, task) => {\n        setCurrentBoard(board);\n        setCurrentTask(task)\n    }\n\n    const taskDragEnd = e => {\n        e.target.style.boxShadow = \"none\";\n    }\n\n    const taskDrop = (e, board, task) => {\n        e.preventDefault();\n\n        const currentIndex = currentBoard.indexOf(currentTask);\n        currentBoard.splice(currentIndex, 1);\n\n        const dropIndex = board.indexOf(task);\n        board.splice(dropIndex + 1, 0, 1);\n\n        setCurrentTask\n    }\n\n\n\n\n\n\n    // const taskDragLeave = e => {\n    //     e.target.style.background = \"rgb(65, 65, 80)\";\n    //     e.preventDefault();\n    //     e.stopPropagation();\n    // }\n\n    // const taskDragEnter = e => {\n    //     e.target.style.background = \"rgb(65, 65, 80)\";\n    //     e.preventDefault();\n    //     e.stopPropagation();\n    // }\n\n    // const taskDragStart = e => {\n    //     const target = e.target;\n\n    //     e.dataTransfer.setData(\"task_Id\", target.id);\n\n    //     setTimeout(() => {\n    //         target.style.display = \"hidden\";\n    //     }, 0);\n    // }\n    // \n    // const taskDragOver = e => {\n    //     e.preventDefault();\n    //     e.stopPropagation();\n    // }\n\n    const EmptyProjectTaskItem = () => {\n        return(\n            <div className=\"empty_project_task_item\"></div>\n        )\n    }\n\n    const ProjectTaskItem = ({ board, task }) => {\n        return(\n            <div className=\"project_task_item\"\n                 draggable={true}\n                 onDragEnd={taskDragEnd}\n                 onDragLeave={taskDragLeave}\n                 onDragStart={e => taskDragStart(e, board, task)}\n                 onDragOver={taskDragOver}\n                 onDrop={e => taskDrop(e, board, task)}\n                 id={\"task-\" + task.id}\n            >\n                <p>{ task.name }</p>\n            </div>\n        )\n    }\n\n    const CreateProjectTaskItem = category => {\n        const openModalHandler = () => {\n            setOpenModal(true);\n            setCategory(category);\n        }\n        \n        return(\n            <div className=\"create_project_task_item\">\n                <span onClick={openModalHandler}>Add task</span>\n            </div>\n        )\n    }\n\n    const renderTaskModal = () => {\n        return(\n            openModal ? <TaskModal closeModal={() => setOpenModal(false)} \n                                   type={CREATE} \n                                   category={category.category}\n                                   currentProject={project} \n                        /> : null \n        )\n    }\n\n    const renderBoards = () => {\n        return (\n            categories.map(ctgry => \n                <div className=\"board\">\n                    <div className=\"project_title\">\n                        <span>{ ctgry }</span>\n                    </div>\n                    <div className=\"project_tasks\"\n                         onDrop={boardDrop}\n                         onDragOver={boardDragOver}\n                         onDragEnter={boardDragEnter}\n                         onDragLeave={boardDragLeave}\n                    >\n                        { currentTasks.map(task => task.category === ctgry ? <ProjectTaskItem board={boards[ctgry]} task={task} /> : null) }\n                        <CreateProjectTaskItem category={ ctgry }/>\n                    </div>\n                </div>\n            )\n            // categories.map(ctgry => \n            //     <div className=\"board\">\n            //         <div className=\"project_title\">\n            //             <span>{ ctgry }</span>\n            //         </div>\n            //         <div className=\"project_tasks\"\n            //              onDrop={boardDrop}\n            //              onDragOver={boardDragOver}\n            //              onDragEnter={boardDragEnter}\n            //              onDragLeave={boardDragLeave}\n            //         >\n            //             { boards[ctgry] && boards[ctgry].map(task => task.category === ctgry ? <ProjectTaskItem board={boards[ctgry]} task={task} /> : null) }\n            //             <CreateProjectTaskItem category={ ctgry }/>\n            //         </div>\n            //     </div>\n        )\n    }\n\n    return(\n        <div className=\"project_board\">\n            { renderTaskModal() }\n            { renderBoards() }\n        </div>\n    )\n}\n\nexport default ProjectBoard;"]},"metadata":{},"sourceType":"module"}