{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({\n  setTab\n}) => {\n  _s();\n\n  const [openModal, setOpenModal] = useState(false);\n  const [category, setCategory] = useState(TO_DO);\n  const {\n    id,\n    projectId\n  } = useParams();\n  const dispatch = useDispatch();\n  const tasks = useSelector(store => store.tasks);\n  const projects = useSelector(store => store.projects);\n  const project = projects.find(proj => proj.id === Number(projectId));\n  const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n  useEffect(async () => await getTasksRequest(id, dispatch), []);\n  useEffect(async () => await getProjectsRequest(id, dispatch), []);\n  useEffect(() => {\n    if (project) {\n      setTab(project.name);\n    }\n  }, [project]);\n\n  const drop = e => {\n    e.preventDefault();\n  };\n\n  const dragOver = e => {\n    e.preventDefault();\n  };\n\n  const ProjectTaskItem = ({\n    name\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      draggable: true,\n      className: \"project_task_item\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  };\n\n  const CreateProjectTaskItem = category => {\n    const openModalHandler = () => {\n      setOpenModal(true);\n      setCategory(category);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_project_task_item\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: openModalHandler,\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTaskModal = () => {\n    return openModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      closeModal: () => setOpenModal(false),\n      type: CREATE,\n      category: category.category,\n      currentProject: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }, this) : null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project_board\",\n    children: [renderTaskModal(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column col-todo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: TO_DO\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_tasks\",\n        children: [currentTasks.map(task => task.category === TO_DO ? /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n          name: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 74\n        }, this) : null), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n          category: TO_DO\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column col-doing\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: IN_PROGRESS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_tasks\",\n        children: [currentTasks.map(task => task.category === IN_PROGRESS ? /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n          name: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 80\n        }, this) : null), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n          category: IN_PROGRESS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column col-done\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: COMPLETED\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_tasks\",\n        children: [currentTasks.map(task => task.category === COMPLETED ? /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n          name: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 78\n        }, this) : null), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n          category: COMPLETED\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectBoard, \"FyuIlDzM5uCMEcupm6zRy2LFnVc=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = ProjectBoard;\nexport default ProjectBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectBoard\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useParams","getProjectsRequest","getTasksRequest","TO_DO","IN_PROGRESS","COMPLETED","TaskModal","CREATE","ProjectBoard","setTab","openModal","setOpenModal","category","setCategory","id","projectId","dispatch","tasks","store","projects","project","find","proj","Number","currentTasks","filter","task","project_Id","name","drop","e","preventDefault","dragOver","ProjectTaskItem","CreateProjectTaskItem","openModalHandler","renderTaskModal","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({ setTab }) => {\n    const [openModal, setOpenModal] = useState(false);\n    const [category, setCategory] = useState(TO_DO);\n    const { id, projectId } = useParams();\n    const dispatch = useDispatch();\n    const tasks = useSelector(store => store.tasks);\n    const projects = useSelector(store => store.projects);\n    const project = projects.find(proj => proj.id === Number(projectId));\n    const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n\n    useEffect(async () => await getTasksRequest(id, dispatch), []);\n    useEffect(async () => await getProjectsRequest(id, dispatch), []);\n\n    useEffect(() => {\n        if (project) {\n            setTab(project.name);\n        }\n    }, [project]);\n\n    const drop = e => {\n        e.preventDefault();\n    }\n\n    const dragOver = e => {\n        e.preventDefault();\n    }\n\n    const ProjectTaskItem = ({ name }) => {\n        return(\n            <div draggable className=\"project_task_item\">\n                <p>{ name }</p>\n            </div>\n        )\n    }\n\n    const CreateProjectTaskItem = category => {\n        const openModalHandler = () => {\n            setOpenModal(true);\n            setCategory(category);\n        }\n        \n        return(\n            <div className=\"create_project_task_item\">\n                <span onClick={openModalHandler}>Add task</span>\n            </div>\n        )\n    }\n\n    const renderTaskModal = () => {\n        return(\n            openModal ? <TaskModal closeModal={() => setOpenModal(false)} \n                                   type={CREATE} \n                                   category={category.category}\n                                   currentProject={project} \n                        /> : null \n        )\n    }\n\n    return(\n        <div className=\"project_board\">\n            { renderTaskModal() }\n            <div className=\"column col-todo\">\n                <div className=\"project_title\">\n                    <span>{ TO_DO }</span>\n                </div>\n                <div className=\"project_tasks\">\n                    { currentTasks.map(task => task.category === TO_DO ? <ProjectTaskItem name={task.name} /> : null) }\n                    <CreateProjectTaskItem category={ TO_DO }/>\n                </div>\n            </div>\n            <div className=\"column col-doing\">\n                <div className=\"project_title\">\n                    <span>{ IN_PROGRESS }</span>\n                </div>\n                <div className=\"project_tasks\">\n                    { currentTasks.map(task => task.category === IN_PROGRESS ? <ProjectTaskItem name={task.name} /> : null) }\n                    <CreateProjectTaskItem category={ IN_PROGRESS }/>\n                </div>\n            </div>\n            <div className=\"column col-done\">\n                <div className=\"project_title\">\n                    <span>{ COMPLETED }</span>\n                </div>\n                <div className=\"project_tasks\">\n                    { currentTasks.map(task => task.category === COMPLETED ? <ProjectTaskItem name={task.name} /> : null) }\n                    <CreateProjectTaskItem category={ COMPLETED }/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProjectBoard;"]},"metadata":{},"sourceType":"module"}