{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({\n  setTab\n}) => {\n  _s();\n\n  const [openModal, setOpenModal] = useState(false);\n  const [category, setCategory] = useState(TO_DO);\n  const {\n    id,\n    projectId\n  } = useParams();\n  const dispatch = useDispatch();\n  const tasks = useSelector(store => store.tasks);\n  const projects = useSelector(store => store.projects);\n  const project = projects.find(proj => proj.id === Number(projectId));\n  const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n  const [data, setData] = useState(initializeData());\n  const dragItem = useRef();\n  useEffect(async () => await getTasksRequest(id, dispatch), []);\n  useEffect(async () => await getProjectsRequest(id, dispatch), []);\n  useEffect(() => {\n    if (project) {\n      setTab(project.name);\n    }\n  }, [project]);\n  useEffect(() => setData(initializeData()), [tasks]);\n\n  function initializeData() {\n    const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n    const newData = categories.map(category => {\n      return {\n        title: category,\n        tasks: []\n      };\n    });\n    currentTasks.forEach(task => {\n      switch (task.category) {\n        case TO_DO:\n          newData[0].tasks.push(task);\n          break;\n\n        case IN_PROGRESS:\n          newData[1].tasks.push(task);\n          break;\n\n        case COMPLETED:\n          newData[2].tasks.push(task);\n          break;\n      }\n    });\n    return newData;\n  }\n\n  const handleDragStart = (e, params) => {\n    dragItem.current = params;\n  }; // const boardDrop = e => {\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  //     e.target.style.background = \"unset\";\n  //     const taskId = e.dataTransfer.getData(\"task_Id\");\n  //     const task = document.querySelector(`#${taskId}`);\n  //     const createTask = e.target.querySelector(\".create_project_task_item\");\n  //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n  //     const boards = document.querySelectorAll(\".project_tasks\");\n  //     const dashIndex = e.target.id.indexOf(\"-\");\n  //     const boardId = e.target.id.substr(dashIndex + 1);\n  //     task.attributes[\"data-board-id\"].value = boardId;\n  //     setTimeout(() => {\n  //         task.style.display = \"flex\";\n  //         emptyTask.style.display = \"none\";\n  //         createTask.style.display = \"flex\";\n  //         boards.forEach(board => board.style.background = \"unset\");\n  //     }, 0);\n  //     e.target.insertBefore(task, emptyTask);\n  //     e.target.appendChild(emptyTask);\n  //     e.target.appendChild(createTask);\n  // }\n  // const boardDragEnter = e => {\n  //     const createTask = e.target.querySelector(\".create_project_task_item\");\n  //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n  //     const boards = document.querySelectorAll(\".project_tasks\");\n  //     boards.forEach(board => {\n  //         if (board == e.target) {\n  //             board.style.background = \"linear-gradient(to bottom, rgba(44, 45, 56, 1), rgba(36, 37, 45, 0.15))\";\n  //         }\n  //         else {\n  //             board.style.background = \"unset\";\n  //         }\n  //     })\n  //     e.target.appendChild(emptyTask);\n  //     e.target.appendChild(createTask);\n  // }\n  // const boardDragLeave = e => {\n  //     e.preventDefault();\n  //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n  //     if (emptyTask) {\n  //         emptyTask.style.display = \"none\";\n  //     }\n  // }\n  // const boardDragOver = e => {\n  //     e.preventDefault();\n  //     const afterElement = getDragAfterElement(e.target, e.clientY);\n  //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n  //     const createTask = e.target.querySelector(\".empty_project_task_item\");\n  //     emptyTask.style.background = \"rgba(30, 30, 40, .5)\";\n  //     emptyTask.style.display = \"flex\";\n  //     createTask.style.display = \"flex\";\n  //     e.target.style.background = \"linear-gradient(to bottom, rgba(44, 45, 56, 1), rgba(36, 37, 45, 0.15))\";\n  //     if (!afterElement) {\n  //         e.target.insertBefore(emptyTask, createTask);\n  //     }\n  //     else {\n  //         e.target.insertBefore(emptyTask, afterElement);\n  //     }\n  // }\n  // const taskDrop = e => {\n  //     const boardId = e.target.attributes[\"data-board-id\"].value;\n  //     if (boardId) {\n  //         const board = document.querySelector(`#board-${boardId}`);\n  //         e.target = board;\n  //         boardDrop(e);\n  //     }\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  // }\n  // const taskDragLeave = e => {\n  //     const boardId = e.target.attributes[\"data-board-id\"].value;\n  //     if (boardId) {\n  //         const board = document.querySelector(`#board-${boardId}`);\n  //         e.target = board;\n  //         boardDragLeave(e);\n  //     }\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  // }\n  // const taskDragEnter = e => {\n  //     const boardId = e.target.attributes[\"data-board-id\"].value;\n  //     if (boardId) {\n  //         const board = document.querySelector(`#board-${boardId}`);\n  //         e.target = board;\n  //         boardDragEnter(e);\n  //     }\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  // }\n  // const taskDragStart = e => {\n  //     const target = e.target;\n  //     target.classList.add(\"dragging\");\n  //     e.dataTransfer.setData(\"task_Id\", target.id);\n  //     setTimeout(() => {\n  //         target.style.display = \"none\";\n  //     }, 0);\n  // }\n  // const taskDragEnd = e => {\n  //     e.target.classList.remove(\"dragging\");\n  //     e.target.style.display = \"flex\";\n  //     e.target.style.boxShadow = \"none\";\n  // }\n  // const taskDragOver = e => {\n  //     const boardId = e.target.attributes[\"data-board-id\"].value;\n  //     if (boardId) {\n  //         const board = document.querySelector(`#board-${boardId}`);\n  //         e.target = board;\n  //         boardDragOver(e);\n  //     }\n  //     if (e.target.className == \"project_task_item\") {\n  //         e.target.style.boxShadow = \"0px 10px 5px 1px rgba(0, 0, 15, .05)\";\n  //     }\n  //     e.preventDefault();\n  //     e.stopPropagation();\n  // }\n  // const getDragAfterElement = (board, y) => {\n  //     const tasks = [...board.querySelectorAll(\".project_task_item:not(.dragging)\")];\n  //     const result = tasks.reduce((closest, task) => {\n  //         const box = task.getBoundingClientRect();\n  //         const offset = y - box.top - box.height / 2;\n  //         if (offset < 0 && offset > closest.offset) {\n  //             return { offset: offset, element: task }\n  //         }\n  //         return closest;\n  //     }, { offset: Number.NEGATIVE_INFINITY })\n  //     return result.element;\n  // }\n\n\n  const EmptyProjectTaskItem = ({\n    boardId\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty_project_task_item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this);\n  };\n\n  const ProjectTaskItem = ({\n    boardId,\n    taskId,\n    task\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project_task_item\",\n      draggable: true,\n      onDragStart: e => handleDragStart(e, {\n        boardId,\n        taskId\n      }),\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this);\n  };\n\n  const CreateProjectTaskItem = ({\n    boardId,\n    category\n  }) => {\n    const openModalHandler = () => {\n      setOpenModal(true);\n      setCategory(category);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_project_task_item\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: openModalHandler,\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTaskModal = () => {\n    return openModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n      closeModal: () => setOpenModal(false),\n      type: CREATE,\n      category: category.category,\n      currentProject: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 25\n    }, this) : null;\n  };\n\n  const renderBoards = () => {\n    return data.map((board, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_title\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: board.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project_tasks\",\n        id: \"board-\" + index,\n        onDrop: boardDrop,\n        onDragOver: boardDragOver,\n        onDragEnter: boardDragEnter,\n        onDragLeave: boardDragLeave,\n        children: [board.tasks.map((task, taskIndex) => task.category === board.title ? /*#__PURE__*/_jsxDEV(ProjectTaskItem, {\n          boardId: index,\n          taskId: taskIndex,\n          task: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 96\n        }, this) : null), /*#__PURE__*/_jsxDEV(EmptyProjectTaskItem, {\n          boardId: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CreateProjectTaskItem, {\n          boardId: index,\n          category: board.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project_board\",\n    children: [renderTaskModal(), renderBoards()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectBoard, \"r2hCAKC9hoOuBABWnU/SZmUhq/8=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = ProjectBoard;\nexport default ProjectBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectBoard\");","map":{"version":3,"sources":["/Applications/MyFiles/Web/ProjectPlanning/PPA_UI/src/components/User/ProjectBoard.jsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","useParams","getProjectsRequest","getTasksRequest","TO_DO","IN_PROGRESS","COMPLETED","TaskModal","CREATE","ProjectBoard","setTab","openModal","setOpenModal","category","setCategory","id","projectId","dispatch","tasks","store","projects","project","find","proj","Number","currentTasks","filter","task","project_Id","data","setData","initializeData","dragItem","name","categories","newData","map","title","forEach","push","handleDragStart","e","params","current","EmptyProjectTaskItem","boardId","ProjectTaskItem","taskId","CreateProjectTaskItem","openModalHandler","renderTaskModal","renderBoards","board","index","boardDrop","boardDragOver","boardDragEnter","boardDragLeave","taskIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getProjectsRequest } from \"../../services/projectServices\";\nimport { getTasksRequest } from \"../../services/taskServices\";\nimport { TO_DO, IN_PROGRESS, COMPLETED } from \"../../constants/taskConstants\";\nimport TaskModal from \"../User/TaskModal\";\nimport { CREATE } from \"../../constants/modalConstants\";\nimport \"../../styles/ProjectBoard.css\";\n\nconst ProjectBoard = ({ setTab }) => {\n    const [openModal, setOpenModal] = useState(false);\n    const [category, setCategory] = useState(TO_DO);\n    const { id, projectId } = useParams();\n    const dispatch = useDispatch();\n    const tasks = useSelector(store => store.tasks);\n    const projects = useSelector(store => store.projects);\n    const project = projects.find(proj => proj.id === Number(projectId));\n    const currentTasks = tasks.filter(task => task.project_Id === Number(projectId));\n    const [data, setData] = useState(initializeData());\n    const dragItem = useRef();\n\n    useEffect(async () => await getTasksRequest(id, dispatch), []);\n    useEffect(async () => await getProjectsRequest(id, dispatch), []);\n\n    useEffect(() => {\n        if (project) {\n            setTab(project.name);\n        }\n    }, [project]);\n\n    useEffect(() => setData(initializeData()), [tasks]);\n\n    function initializeData () {\n        const categories = [TO_DO, IN_PROGRESS, COMPLETED];\n        const newData = categories.map(category => { return { title: category, tasks: [] } });\n\n        currentTasks.forEach(task => {\n            switch (task.category) {\n                case TO_DO:\n                    newData[0].tasks.push(task);\n                    break;\n                case IN_PROGRESS:\n                    newData[1].tasks.push(task);\n                    break;\n                case COMPLETED:\n                    newData[2].tasks.push(task);\n                    break;\n            }\n        })\n\n        return newData;\n    }\n\n    const handleDragStart = (e, params) => {\n        dragItem.current = params;\n    }\n\n\n\n\n\n    // const boardDrop = e => {\n    //     e.preventDefault();\n    //     e.stopPropagation();\n    //     e.target.style.background = \"unset\";\n\n    //     const taskId = e.dataTransfer.getData(\"task_Id\");\n    //     const task = document.querySelector(`#${taskId}`);\n\n    //     const createTask = e.target.querySelector(\".create_project_task_item\");\n    //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n\n    //     const boards = document.querySelectorAll(\".project_tasks\");\n    //     const dashIndex = e.target.id.indexOf(\"-\");\n    //     const boardId = e.target.id.substr(dashIndex + 1);\n    //     task.attributes[\"data-board-id\"].value = boardId;\n\n    //     setTimeout(() => {\n    //         task.style.display = \"flex\";\n    //         emptyTask.style.display = \"none\";\n    //         createTask.style.display = \"flex\";\n    //         boards.forEach(board => board.style.background = \"unset\");\n    //     }, 0);\n\n    //     e.target.insertBefore(task, emptyTask);\n    //     e.target.appendChild(emptyTask);\n    //     e.target.appendChild(createTask);\n    // }\n\n    // const boardDragEnter = e => {\n    //     const createTask = e.target.querySelector(\".create_project_task_item\");\n    //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n    //     const boards = document.querySelectorAll(\".project_tasks\");\n\n    //     boards.forEach(board => {\n    //         if (board == e.target) {\n    //             board.style.background = \"linear-gradient(to bottom, rgba(44, 45, 56, 1), rgba(36, 37, 45, 0.15))\";\n    //         }\n    //         else {\n    //             board.style.background = \"unset\";\n    //         }\n    //     })\n        \n    //     e.target.appendChild(emptyTask);\n    //     e.target.appendChild(createTask);\n    // }\n\n    // const boardDragLeave = e => {\n    //     e.preventDefault();\n\n    //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n\n    //     if (emptyTask) {\n    //         emptyTask.style.display = \"none\";\n    //     }\n    // }\n\n    // const boardDragOver = e => {\n    //     e.preventDefault();\n    //     const afterElement = getDragAfterElement(e.target, e.clientY);\n    //     const emptyTask = e.target.querySelector(\".empty_project_task_item\");\n    //     const createTask = e.target.querySelector(\".empty_project_task_item\");\n\n    //     emptyTask.style.background = \"rgba(30, 30, 40, .5)\";\n    //     emptyTask.style.display = \"flex\";\n    //     createTask.style.display = \"flex\";\n    //     e.target.style.background = \"linear-gradient(to bottom, rgba(44, 45, 56, 1), rgba(36, 37, 45, 0.15))\";\n\n    //     if (!afterElement) {\n    //         e.target.insertBefore(emptyTask, createTask);\n    //     }\n    //     else {\n    //         e.target.insertBefore(emptyTask, afterElement);\n    //     }\n    // }\n\n    // const taskDrop = e => {\n    //     const boardId = e.target.attributes[\"data-board-id\"].value;\n\n    //     if (boardId) {\n    //         const board = document.querySelector(`#board-${boardId}`);\n    //         e.target = board;\n    //         boardDrop(e);\n    //     }\n\n    //     e.preventDefault();\n    //     e.stopPropagation();\n    // }\n\n    // const taskDragLeave = e => {\n    //     const boardId = e.target.attributes[\"data-board-id\"].value;\n\n    //     if (boardId) {\n    //         const board = document.querySelector(`#board-${boardId}`);\n    //         e.target = board;\n    //         boardDragLeave(e);\n    //     }\n\n    //     e.preventDefault();\n    //     e.stopPropagation();\n    // }\n\n    // const taskDragEnter = e => {\n    //     const boardId = e.target.attributes[\"data-board-id\"].value;\n\n    //     if (boardId) {\n    //         const board = document.querySelector(`#board-${boardId}`);\n    //         e.target = board;\n    //         boardDragEnter(e);\n    //     }\n        \n    //     e.preventDefault();\n    //     e.stopPropagation();\n    // }\n\n    // const taskDragStart = e => {\n    //     const target = e.target;\n    //     target.classList.add(\"dragging\");\n    //     e.dataTransfer.setData(\"task_Id\", target.id);\n\n    //     setTimeout(() => {\n    //         target.style.display = \"none\";\n    //     }, 0);\n    // }\n\n    // const taskDragEnd = e => {\n    //     e.target.classList.remove(\"dragging\");\n    //     e.target.style.display = \"flex\";\n    //     e.target.style.boxShadow = \"none\";\n    // }\n    \n    // const taskDragOver = e => {\n    //     const boardId = e.target.attributes[\"data-board-id\"].value;\n\n    //     if (boardId) {\n    //         const board = document.querySelector(`#board-${boardId}`);\n    //         e.target = board;\n    //         boardDragOver(e);\n    //     }\n\n    //     if (e.target.className == \"project_task_item\") {\n    //         e.target.style.boxShadow = \"0px 10px 5px 1px rgba(0, 0, 15, .05)\";\n    //     }\n\n    //     e.preventDefault();\n    //     e.stopPropagation();\n    // }\n\n    // const getDragAfterElement = (board, y) => {\n    //     const tasks = [...board.querySelectorAll(\".project_task_item:not(.dragging)\")];\n    //     const result = tasks.reduce((closest, task) => {\n    //         const box = task.getBoundingClientRect();\n    //         const offset = y - box.top - box.height / 2;\n\n    //         if (offset < 0 && offset > closest.offset) {\n    //             return { offset: offset, element: task }\n    //         }\n            \n    //         return closest;\n    //     }, { offset: Number.NEGATIVE_INFINITY })\n        \n    //     return result.element;\n    // }\n\n\n    \n\n    const EmptyProjectTaskItem = ({ boardId }) => {\n        return(\n            <div className=\"empty_project_task_item\"\n                 \n            >\n            </div>\n        )\n    }\n\n    const ProjectTaskItem = ({ boardId, taskId, task }) => {\n        return(\n            <div className=\"project_task_item\"\n                 draggable={true}\n                 onDragStart={e => handleDragStart(e, { boardId, taskId })}\n            >\n                <p>{ task.name }</p>\n            </div>\n        )\n    }\n\n    const CreateProjectTaskItem = ({ boardId, category }) => {\n        const openModalHandler = () => {\n            setOpenModal(true);\n            setCategory(category);\n        }\n        \n        return(\n            <div className=\"create_project_task_item\">\n                <span onClick={openModalHandler}>Add task</span>\n            </div>\n        )\n    }\n\n    const renderTaskModal = () => {\n        return(\n            openModal ? <TaskModal closeModal={() => setOpenModal(false)} \n                                   type={CREATE} \n                                   category={category.category}\n                                   currentProject={project} \n                        /> : null \n        )\n    }\n\n    const renderBoards = () => {\n        return (\n            data.map((board, index) => \n                <div className=\"board\">\n                    <div className=\"project_title\">\n                        <span>{ board.title }</span>\n                    </div>\n                    <div className=\"project_tasks\"\n                         id={\"board-\" + index}\n                         onDrop={boardDrop}\n                         onDragOver={boardDragOver}\n                         onDragEnter={boardDragEnter}\n                         onDragLeave={boardDragLeave}\n                    >\n                        { board.tasks.map((task, taskIndex) => task.category === board.title ? <ProjectTaskItem boardId={index} taskId={taskIndex} task={task} /> : null) }\n                        <EmptyProjectTaskItem boardId={index}/>\n                        <CreateProjectTaskItem boardId={index} category={ board.title }/>\n                    </div>\n                </div>\n            )\n        )\n    }\n\n    return(\n        <div className=\"project_board\">\n            { renderTaskModal() }\n            { renderBoards() }\n        </div>\n    )\n}\n\nexport default ProjectBoard;\n"]},"metadata":{},"sourceType":"module"}